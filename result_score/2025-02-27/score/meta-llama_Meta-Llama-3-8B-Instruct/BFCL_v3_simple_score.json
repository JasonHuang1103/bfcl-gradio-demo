{"accuracy": 0.87, "correct_count": 348, "total_count": 400}
{"id": "simple_5", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'root_type' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_5", "question": [[{"role": "user", "content": "Find all the roots of a quadratic equation given coefficients a = 3, b = -11, and c = -4."}]], "function": [{"name": "solve_quadratic", "description": "Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The coefficient of the squared term in the quadratic equation."}, "b": {"type": "integer", "description": "The coefficient of the linear term in the quadratic equation."}, "c": {"type": "integer", "description": "The constant term in the quadratic equation."}, "root_type": {"type": "string", "description": "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. Default value is 'real'."}}, "required": ["a", "b", "c"]}}]}, "model_result_raw": "solve_quadratic(a=3, b=-11, c=-4)", "model_result_decoded": [{"solve_quadratic": {"a": 3, "b": -11, "c": -4}}], "possible_answer": [{"solve_quadratic": {"a": [3], "b": [-11], "c": [-4], "root_type": ["all"]}}]}
{"id": "simple_13", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"id": "simple_13", "question": [[{"role": "user", "content": "Calculate the area under the curve y=x^2 from x=1 to x=3."}]], "function": [{"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}]}, "model_result_raw": "calculate_area_under_curve(function='x**2', interval=[1, 3])", "model_result_decoded": [{"calculate_area_under_curve": {"function": "x**2", "interval": [1, 3]}}], "possible_answer": [{"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2", "y=x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}]}
{"id": "simple_38", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'charge2': 1e-09. Expected one of [2e-09]."], "error_type": "value_error:others", "prompt": {"id": "simple_38", "question": [[{"role": "user", "content": "What is the electrostatic potential between two charged bodies of 1e-9 and 2e-9 of distance 0.05?"}]], "function": [{"name": "calculate_electrostatic_potential", "description": "Calculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law.", "parameters": {"type": "dict", "properties": {"charge1": {"type": "float", "description": "The quantity of charge on the first body."}, "charge2": {"type": "float", "description": "The quantity of charge on the second body."}, "distance": {"type": "float", "description": "The distance between the two bodies."}, "constant": {"type": "float", "description": "The value of the electrostatic constant. Default is 8.99e9."}}, "required": ["charge1", "charge2", "distance"]}}]}, "model_result_raw": "calculate_electrostatic_potential(charge1=1e-9, charge2=1e-9, distance=0.05)", "model_result_decoded": [{"calculate_electrostatic_potential": {"charge1": 1e-09, "charge2": 1e-09, "distance": 0.05}}], "possible_answer": [{"calculate_electrostatic_potential": {"charge1": [1e-09], "charge2": [2e-09], "distance": [0.05], "constant": ["", 8990000000.0]}}]}
{"id": "simple_49", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'atm_pressure': 101325. Expected one of [1]."], "error_type": "value_error:others", "prompt": {"id": "simple_49", "question": [[{"role": "user", "content": "Calculate the absolute pressure in pascals given atmospheric pressure of 1 atm and a gauge pressure of 2 atm."}]], "function": [{"name": "calc_absolute_pressure", "description": "Calculates the absolute pressure from gauge and atmospheric pressures.", "parameters": {"type": "dict", "properties": {"atm_pressure": {"type": "integer", "description": "The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided."}, "gauge_pressure": {"type": "integer", "description": "The gauge pressure in atmospheres (atm). Must be provided."}}, "required": ["gauge_pressure"]}}]}, "model_result_raw": "calc_absolute_pressure(atm_pressure=101325, gauge_pressure=200000)", "model_result_decoded": [{"calc_absolute_pressure": {"atm_pressure": 101325, "gauge_pressure": 200000}}], "possible_answer": [{"calc_absolute_pressure": {"atm_pressure": [1], "gauge_pressure": [2]}}]}
{"id": "simple_50", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'substance': 'water'. Expected one of ['ice']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_50", "question": [[{"role": "user", "content": "What is the change in entropy in Joules per Kelvin of a 1kg ice block at 0\u00b0C if it is heated to 100\u00b0C under 1 atmosphere of pressure?"}]], "function": [{"name": "entropy_change.calculate", "description": "Calculate the change in entropy for a mass of a specific substance under set initial and final conditions.", "parameters": {"type": "dict", "properties": {"substance": {"type": "string", "description": "The substance for which the change in entropy is calculated."}, "mass": {"type": "integer", "description": "The mass of the substance in kg."}, "initial_temperature": {"type": "integer", "description": "The initial temperature of the substance in degree Celsius."}, "final_temperature": {"type": "integer", "description": "The final temperature of the substance in degree Celsius."}, "pressure": {"type": "integer", "default": 1, "description": "The pressure the substance is under in atmospheres."}}, "required": ["substance", "mass", "initial_temperature", "final_temperature"]}}]}, "model_result_raw": "entropy_change.calculate(substance='water', mass=1, initial_temperature=0, final_temperature=100, pressure=1)", "model_result_decoded": [{"entropy_change.calculate": {"substance": "water", "mass": 1, "initial_temperature": 0, "final_temperature": 100, "pressure": 1}}], "possible_answer": [{"entropy_change.calculate": {"substance": ["ice"], "mass": [1], "initial_temperature": [0], "final_temperature": [100], "pressure": ["", 1]}}]}
{"id": "simple_63", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'species1': 'Homo sapiens'. Expected one of ['Human', 'human']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_63", "question": [[{"role": "user", "content": "Find out how genetically similar a human and a chimp are in percentage."}]], "function": [{"name": "genetics.calculate_similarity", "description": "Calculates the genetic similarity between two species based on their DNA sequences.", "parameters": {"type": "dict", "properties": {"species1": {"type": "string", "description": "The first species to compare."}, "species2": {"type": "string", "description": "The second species to compare."}, "format": {"type": "string", "description": "The format of the result (percentage or fraction). Default is percentage."}}, "required": ["species1", "species2"]}}]}, "model_result_raw": "genetics.calculate_similarity(species1='Homo sapiens', species2='Pan troglodytes', format='percentage')", "model_result_decoded": [{"genetics.calculate_similarity": {"species1": "Homo sapiens", "species2": "Pan troglodytes", "format": "percentage"}}], "possible_answer": [{"genetics.calculate_similarity": {"species1": ["Human", "human"], "species2": ["Chimp", "chimp", "Chimpanzee", "chimpanzee"], "format": ["percentage", ""]}}]}
{"id": "simple_69", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'species' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_69", "question": [[{"role": "user", "content": "Find out the population and species of turtles in Mississippi river in 2020."}]], "function": [{"name": "ecology.get_turtle_population", "description": "Get the population and species of turtles in a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The name of the location."}, "year": {"type": "integer", "description": "The year of the data requested. Default is 2001."}, "species": {"type": "boolean", "description": "Whether to include species information. Default is false."}}, "required": ["location"]}}]}, "model_result_raw": "ecology.get_turtle_population(location='Mississippi River', year=2020)", "model_result_decoded": [{"ecology.get_turtle_population": {"location": "Mississippi River", "year": 2020}}], "possible_answer": [{"ecology.get_turtle_population": {"location": ["Mississippi river"], "year": [2020], "species": [true]}}]}
{"id": "simple_71", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'preferences'. Expected type array, got dict. Parameter value: {'A': 0.2, 'T': 0.2, 'G': 0.4, 'C': 0.2}."], "error_type": "type_error:simple", "prompt": {"id": "simple_71", "question": [[{"role": "user", "content": "Generate a DNA sequence with 100 bases including more G (Guanine) and C (Cytosine)."}]], "function": [{"name": "generate_DNA_sequence", "description": "Generate a random DNA sequence with a specific length and nucleotide preference.", "parameters": {"type": "dict", "properties": {"length": {"type": "integer", "description": "The length of the DNA sequence to be generated."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["A", "T", "C", "G"]}, "description": "Preferred nucleotides to include more frequently in the DNA sequence."}}, "required": ["length", "preferences"]}}]}, "model_result_raw": "generate_DNA_sequence(length=100, preferences={'A': 0.2, 'T': 0.2, 'G': 0.4, 'C': 0.2})", "model_result_decoded": [{"generate_DNA_sequence": {"length": 100, "preferences": {"A": 0.2, "T": 0.2, "G": 0.4, "C": 0.2}}}], "possible_answer": [{"generate_DNA_sequence": {"length": [100], "preferences": [["G", "C"], ["C", "G"]]}}]}
{"id": "simple_82", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": [[{"role": "user", "content": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30]."}]], "function": [{"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}]}, "model_result_raw": "calculate_average(numbers=[12, 15, 18, 20, 21, 26, 30])", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": [{"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}]}
{"id": "simple_87", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": [[{"role": "user", "content": "Sort the list [5, 3, 4, 1, 2] in ascending order."}]], "function": [{"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}]}, "model_result_raw": "array_sort(list=[5, 3, 4, 1, 2], order='ascending')", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": [{"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}]}
{"id": "simple_91", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'condition': 'operating_days=Sundays'. Expected one of ['open on Sundays', 'opens on Sundays']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_91", "question": [[{"role": "user", "content": "Get the highest rated sushi restaurant in Boston, that opens on Sundays."}]], "function": [{"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}]}, "model_result_raw": "get_restaurant(cuisine='sushi', location='Boston', condition='operating_days=Sundays')", "model_result_decoded": [{"get_restaurant": {"cuisine": "sushi", "location": "Boston", "condition": "operating_days=Sundays"}}], "possible_answer": [{"get_restaurant": {"cuisine": ["sushi"], "location": ["Boston"], "condition": ["open on Sundays", "opens on Sundays"]}}]}
{"id": "simple_99", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. name 'pi' is not defined"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_99", "question": [[{"role": "user", "content": "Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz."}]], "function": [{"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "float", "description": "Start of the range in radians. Four decimal places."}, "end_range": {"type": "float", "description": "End of the range in radians. Four decimal places."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}]}, "model_result_raw": "plot_sine_wave(start_range=0, end_range=2*pi, frequency=5)", "possible_answer": [{"plot_sine_wave": {"start_range": [0.0], "end_range": [6.2832], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}]}
{"id": "simple_101", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'to_unit' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_101", "question": [[{"role": "user", "content": "Calculate the speed of an object in km/h if it traveled 450 meters in 20 seconds."}]], "function": [{"name": "calculate_speed", "description": "Calculate the speed of an object based on the distance travelled and the time taken.", "parameters": {"type": "dict", "properties": {"distance": {"type": "integer", "description": "The distance the object travelled in meters."}, "time": {"type": "integer", "description": "The time it took for the object to travel in seconds."}, "to_unit": {"type": "string", "description": "The unit in which the speed should be calculated, default is m/s."}}, "required": ["distance", "time"]}}]}, "model_result_raw": "calculate_speed(distance=450, time=20)", "model_result_decoded": [{"calculate_speed": {"distance": 450, "time": 20}}], "possible_answer": [{"calculate_speed": {"distance": [450], "time": [20], "to_unit": ["km/h"]}}]}
{"id": "simple_102", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'unit' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_102", "question": [[{"role": "user", "content": "What's the distance in milesfrom the Earth to the Moon?"}]], "function": [{"name": "calculate_distance", "description": "Calculate the distance between two celestial bodies.", "parameters": {"type": "dict", "properties": {"body1": {"type": "string", "description": "The first celestial body."}, "body2": {"type": "string", "description": "The second celestial body."}, "unit": {"type": "string", "description": "The unit of measurement, default is 'km'."}}, "required": ["body1", "body2"]}}]}, "model_result_raw": "calculate_distance(body1='Earth', body2='Moon')", "model_result_decoded": [{"calculate_distance": {"body1": "Earth", "body2": "Moon"}}], "possible_answer": [{"calculate_distance": {"body1": ["Earth"], "body2": ["Moon"], "unit": ["mi", "miles", "mile"]}}]}
{"id": "simple_103", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."], "error_type": "type_error:nested", "prompt": {"id": "simple_103", "question": [[{"role": "user", "content": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2."}]], "function": [{"name": "mathematics.calculate_area_under_curve", "description": "Calculate the area under the curve for a given polynomial function within a specified interval.", "parameters": {"type": "dict", "properties": {"polynomial": {"type": "array", "items": {"type": "float"}, "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."}, "limits": {"type": "array", "items": {"type": "float"}, "description": "A list of two numbers specifying the lower and upper limit for the integration interval."}}, "required": ["polynomial", "limits"]}}]}, "model_result_raw": "mathematics.calculate_area_under_curve(polynomial=[3, 2, -4], limits=[-1, 2])", "model_result_decoded": [{"mathematics.calculate_area_under_curve": {"polynomial": [3, 2, -4], "limits": [-1, 2]}}], "possible_answer": [{"mathematics.calculate_area_under_curve": {"polynomial": [[3.0, 2.0, -4.0]], "limits": [[-1.0, 2.0]]}}]}
{"id": "simple_111", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'mu'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_111", "question": [[{"role": "user", "content": "Generate a random number from a normal distribution with mean 0 and standard deviation 1."}]], "function": [{"name": "random.normalvariate", "description": "Generates a random number from a normal distribution given the mean and standard deviation.", "parameters": {"type": "dict", "properties": {"mu": {"type": "integer", "description": "Mean of the normal distribution."}, "sigma": {"type": "integer", "description": "Standard deviation of the normal distribution."}}, "required": ["mu", "sigma"]}}]}, "model_result_raw": "random.normalvariate(0, 1)", "model_result_decoded": [{"random.normalvariate": {}}], "possible_answer": [{"random.normalvariate": {"mu": [0], "sigma": [1]}}]}
{"id": "simple_112", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'total_outcomes'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_112", "question": [[{"role": "user", "content": "Calculate the probability of drawing a king from a deck of cards."}]], "function": [{"name": "calculate_probability", "description": "Calculate the probability of an event.", "parameters": {"type": "dict", "properties": {"total_outcomes": {"type": "integer", "description": "Total number of possible outcomes."}, "favorable_outcomes": {"type": "integer", "description": "Number of outcomes considered as 'successful'."}, "round_to": {"type": "integer", "description": "Number of decimal places to round the result to.", "default": 2}}, "required": ["total_outcomes", "favorable_outcomes"]}}]}, "model_result_raw": "calculate_probability({'total_outcomes': 52, 'favorable_outcomes': 4, 'round_to': 4})", "model_result_decoded": [{"calculate_probability": {}}], "possible_answer": [{"calculate_probability": {"total_outcomes": [52], "favorable_outcomes": [4], "round_to": ["", 2]}}]}
{"id": "simple_119", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'hypothesis_testing.ttest_ind' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_119", "question": [[{"role": "user", "content": "Perform a hypothesis test for two independent samples with scores of Sample1: [22,33,42,12,34] and Sample2: [23,45,44,14,38] at a significance level of 0.05."}]], "function": [{"name": "hypothesis_testing.ttest_ind", "description": "Conducts a hypothesis test for two independent samples.", "parameters": {"type": "dict", "properties": {"sample1": {"type": "array", "items": {"type": "integer"}, "description": "First set of observations (array of numbers)."}, "sample2": {"type": "array", "items": {"type": "integer"}, "description": "Second set of observations (array of numbers)."}, "significance_level": {"type": "float", "description": "Significance level of the test (default: 0.05)"}}, "required": ["sample1", "sample2"]}}]}, "model_result_raw": "ttest_ind(sample1=[22,33,42,12,34], sample2=[23,45,44,14,38], significance_level=0.05)", "model_result_decoded": [{"ttest_ind": {"sample1": [22, 33, 42, 12, 34], "sample2": [23, 45, 44, 14, 38], "significance_level": 0.05}}], "possible_answer": [{"hypothesis_testing.ttest_ind": {"sample1": [[22, 33, 42, 12, 34]], "sample2": [[23, 45, 44, 14, 38]], "significance_level": [0.05]}}]}
{"id": "simple_122", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'table'. Expected outer type array with inner type <class 'list'>. Parameter value: [10, 20, 30, 40]."], "error_type": "type_error:nested", "prompt": {"id": "simple_122", "question": [[{"role": "user", "content": "Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ]"}]], "function": [{"name": "chi_squared_test", "description": "Performs a Chi-Squared test for independence on a 2x2 contingency table.", "parameters": {"type": "dict", "properties": {"table": {"type": "array", "items": {"type": "array", "items": {"type": "integer"}}, "description": "A 2x2 contingency table presented in array form."}, "alpha": {"type": "float", "description": "Significance level for the Chi-Squared test. Default is 0.05."}}, "required": ["table"]}}]}, "model_result_raw": "chi_squared_test(table=[10, 20, 30, 40], alpha=0.05)", "model_result_decoded": [{"chi_squared_test": {"table": [10, 20, 30, 40], "alpha": 0.05}}], "possible_answer": [{"chi_squared_test": {"table": [[[10, 20], [30, 40]]], "alpha": [0.05, ""]}}]}
{"id": "simple_124", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. closing parenthesis ')' does not match opening parenthesis '[' (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_124", "question": [[{"role": "user", "content": "Find the statistical significance between two set of variables, dataset_A with the values 12, 24, 36 and dataset_B with the values 15, 30, 45."}]], "function": [{"name": "t_test", "description": "Perform a statistical t-test to check if the means of two independent datasets are statistically different.", "parameters": {"type": "dict", "properties": {"dataset_A": {"type": "array", "items": {"type": "integer"}, "description": "Dataset A for comparison."}, "dataset_B": {"type": "array", "items": {"type": "integer"}, "description": "Dataset B for comparison."}, "alpha": {"type": "float", "description": "Significance level for the test. Default is 0.05."}}, "required": ["dataset_A", "dataset_B"]}}]}, "model_result_raw": "t_test(dataset_A=[12, 24, 36], dataset_B=[15, 30, 45), alpha=0.05)", "possible_answer": [{"t_test": {"dataset_A": [[12, 24, 36]], "dataset_B": [[15, 30, 45]], "alpha": [0.05, ""]}}]}
{"id": "simple_136", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_rate': 0.05. Expected one of [5.0]."], "error_type": "value_error:others", "prompt": {"id": "simple_136", "question": [[{"role": "user", "content": "Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years."}]], "function": [{"name": "compound_interest", "description": "Calculate compound interest for a certain time period.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The initial amount of money that was invested or loaned out."}, "annual_rate": {"type": "float", "description": "The interest rate for a year as a percentage."}, "compounding_freq": {"type": "string", "enum": ["monthly", "quarterly", "annually"], "description": "The number of times that interest is compounded per unit period."}, "time_in_years": {"type": "integer", "description": "The time the money is invested for in years."}}, "required": ["principal", "annual_rate", "compounding_freq", "time_in_years"]}}]}, "model_result_raw": "compound_interest(principal=10000, annual_rate=0.05, compounding_freq='monthly', time_in_years=5)", "model_result_decoded": [{"compound_interest": {"principal": 10000, "annual_rate": 0.05, "compounding_freq": "monthly", "time_in_years": 5}}], "possible_answer": [{"compound_interest": {"principal": [10000], "annual_rate": [5.0], "compounding_freq": ["monthly"], "time_in_years": [5]}}]}
{"id": "simple_139", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'yearly_yield': 0.05. Expected one of [5.0]."], "error_type": "value_error:others", "prompt": {"id": "simple_139", "question": [[{"role": "user", "content": "What is the estimated return on a mutual fund, given that it has a yearly yield of 5%, an investment amount of $2000 and a time period of 3 years?"}]], "function": [{"name": "estimate_mutual_fund_return", "description": "Calculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period.", "parameters": {"type": "dict", "properties": {"yearly_yield": {"type": "float", "description": "The yearly yield of the mutual fund as a percentage."}, "investment_amount": {"type": "integer", "description": "The initial investment amount in the mutual fund."}, "years": {"type": "integer", "description": "The time period for which the investment is made in years."}}, "required": ["yearly_yield", "investment_amount", "years"]}}]}, "model_result_raw": "estimate_mutual_fund_return(yearly_yield=0.05, investment_amount=2000, years=3)", "model_result_decoded": [{"estimate_mutual_fund_return": {"yearly_yield": 0.05, "investment_amount": 2000, "years": 3}}], "possible_answer": [{"estimate_mutual_fund_return": {"yearly_yield": [5.0], "investment_amount": [2000], "years": [3]}}]}
{"id": "simple_147", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'companies': ['MSFT', 'GOOG']. Expected one of [['Microsoft', 'Google']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_147", "question": [[{"role": "user", "content": "Retrieve stock prices of Microsoft and Google for the last 2 weeks."}]], "function": [{"name": "get_stock_prices", "description": "Retrieves stock prices for specified companies and duration.", "parameters": {"type": "dict", "properties": {"companies": {"type": "array", "items": {"type": "string"}, "description": "List of companies to retrieve stock prices for."}, "duration": {"type": "string", "description": "Time duration to retrieve stock prices for. E.g., '1 week', '2 weeks', '1 month', etc."}}, "required": ["companies", "duration"]}}]}, "model_result_raw": "get_stock_prices(companies=['MSFT', 'GOOG'], duration='2 weeks')", "model_result_decoded": [{"get_stock_prices": {"companies": ["MSFT", "GOOG"], "duration": "2 weeks"}}], "possible_answer": [{"get_stock_prices": {"companies": [["Microsoft", "Google"]], "duration": ["2 weeks"]}}]}
{"id": "simple_151", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_151", "question": [[{"role": "user", "content": "Find the highest grossing bank in the U.S for year 2020."}]], "function": [{"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}]}, "model_result_raw": "highest_grossing_banks(country='United States', year=2020)", "model_result_decoded": [{"highest_grossing_banks": {"country": "United States", "year": 2020}}], "possible_answer": [{"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S."], "year": [2020], "top_n": [1]}}]}
{"id": "simple_158", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_158", "question": [[{"role": "user", "content": "Find the information of criminal cases of Mr. X in New York between 2012 and 2015."}]], "function": [{"name": "get_criminal_records", "description": "Retrieve the criminal records of a specific person in a specific area during a certain time period.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY"}, "from_year": {"type": "integer", "description": "The start year of the time frame."}, "to_year": {"type": "integer", "description": "The end year of the time frame."}}, "required": ["name", "location", "from_year", "to_year"]}}]}, "model_result_raw": "get_criminal_records(name='Mr. X', location='New York', from_year=2012, to_year=2015)", "model_result_decoded": [{"get_criminal_records": {"name": "Mr. X", "location": "New York", "from_year": 2012, "to_year": 2015}}], "possible_answer": [{"get_criminal_records": {"name": ["Mr. X"], "location": ["New York, NY"], "from_year": [2012], "to_year": [2015]}}]}
{"id": "simple_166", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'fee': 399. Expected one of [400]."], "error_type": "value_error:others", "prompt": {"id": "simple_166", "question": [[{"role": "user", "content": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago."}]], "function": [{"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}]}, "model_result_raw": "lawyer.find_nearby(city='Chicago, IL', specialty=['Divorce'], fee=399)", "model_result_decoded": [{"lawyer.find_nearby": {"city": "Chicago, IL", "specialty": ["Divorce"], "fee": 399}}], "possible_answer": [{"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL"], "specialty": [["Divorce"]], "fee": [400]}}]}
{"id": "simple_173", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'judicial_system' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_173", "question": [[{"role": "user", "content": "Find state law cases related to land disputes in the past 5 years from 2015 to 2021 in New York."}]], "function": [{"name": "law_case_search", "description": "Search and retrieve law cases based on the topic, timeline, and location.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The subject matter of the case."}, "year_range": {"type": "array", "items": {"type": "integer"}, "description": "The start and end year for searching cases."}, "location": {"type": "string", "description": "The location where the case is being heard."}, "judicial_system": {"type": "string", "description": "The specific judicial system in which to search (e.g. 'federal', 'state').", "default": "all"}}, "required": ["topic", "year_range", "location"]}}]}, "model_result_raw": "law_case_search(topic='land disputes', year_range=[2015, 2021], location='New York')", "model_result_decoded": [{"law_case_search": {"topic": "land disputes", "year_range": [2015, 2021], "location": "New York"}}], "possible_answer": [{"law_case_search": {"topic": ["land disputes"], "year_range": [[2015, 2021]], "location": ["New York"], "judicial_system": ["state"]}}]}
{"id": "simple_196", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_196", "question": [[{"role": "user", "content": "What is the air quality index in London 2022/08/16?"}]], "function": [{"name": "air_quality", "description": "Retrieve the air quality index for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality index for."}, "date": {"type": "string", "description": "The date (month-day-year) you want to get the air quality index for."}}, "required": ["location", "date"]}}]}, "model_result_raw": "air_quality(location='London', date='2022-08-16)", "possible_answer": [{"air_quality": {"location": ["London"], "date": ["08-16-2022"]}}]}
{"id": "simple_197", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'time': '12:00:00'. Expected one of ['12pm', '12:00']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_197", "question": [[{"role": "user", "content": "Find the air quality index in San Diego at 12pm."}]], "function": [{"name": "get_air_quality_index", "description": "Retrieve the air quality index at a specified location and time.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location to get the air quality index for."}, "time": {"type": "string", "description": "The specific time to check the air quality. Default is the current time."}}, "required": ["location", "time"]}}]}, "model_result_raw": "get_air_quality_index(location='San Diego', time='12:00:00')", "model_result_decoded": [{"get_air_quality_index": {"location": "San Diego", "time": "12:00:00"}}], "possible_answer": [{"get_air_quality_index": {"location": ["San Diego"], "time": ["12pm", "12:00"]}}]}
{"id": "simple_202", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'energy_type': 'solar'. Expected one of ['renewable']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_202", "question": [[{"role": "user", "content": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?"}]], "function": [{"name": "calculate_emission_savings", "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.", "parameters": {"type": "dict", "properties": {"energy_type": {"type": "string", "description": "Type of the renewable energy source."}, "usage_duration": {"type": "integer", "description": "Usage duration in months."}, "region": {"type": "string", "description": "The region where you use energy. Default is 'Texas'."}}, "required": ["energy_type", "usage_duration"]}}]}, "model_result_raw": "calculate_emission_savings(energy_type='solar', usage_duration=3, region='California')", "model_result_decoded": [{"calculate_emission_savings": {"energy_type": "solar", "usage_duration": 3, "region": "California"}}], "possible_answer": [{"calculate_emission_savings": {"energy_type": ["renewable"], "usage_duration": [3], "region": ["California", "CA"]}}]}
{"id": "simple_209", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'facilities': ['English Fiction', 'Wi-Fi']. Expected one of [['Fiction', 'Wi-Fi'], ['Wi-Fi', 'Fiction']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_209", "question": [[{"role": "user", "content": "Locate the nearest public library in Boston, Massachusetts with English fiction section and free Wi-Fi."}]], "function": [{"name": "public_library.find_nearby", "description": "Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Boston, MA"}, "facilities": {"type": "array", "items": {"type": "string", "enum": ["Wi-Fi", "Reading Room", "Fiction", "Children Section", "Cafe"]}, "description": "Facilities and sections in public library."}}, "required": ["location", "facilities"]}}]}, "model_result_raw": "public_library.find_nearby(location='Boston, MA', facilities=['English Fiction', 'Wi-Fi'])", "model_result_decoded": [{"public_library.find_nearby": {"location": "Boston, MA", "facilities": ["English Fiction", "Wi-Fi"]}}], "possible_answer": [{"public_library.find_nearby": {"location": ["Boston, MA", "Boston, Massachusetts"], "facilities": [["Fiction", "Wi-Fi"], ["Wi-Fi", "Fiction"]]}}]}
{"id": "simple_215", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'extra_info': True. Expected one of ['', False]."], "error_type": "value_error:others", "prompt": {"id": "simple_215", "question": [[{"role": "user", "content": "Give me a brief on movie 'Interstellar'"}]], "function": [{"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}]}, "model_result_raw": "movie_details.brief(title='Interstellar', extra_info=True)", "model_result_decoded": [{"movie_details.brief": {"title": "Interstellar", "extra_info": true}}], "possible_answer": [{"movie_details.brief": {"title": ["Interstellar"], "extra_info": ["", false]}}]}
{"id": "simple_229", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_229", "question": [[{"role": "user", "content": "What's my Big Five Personality trait scores given that I am efficient, organized, easy going and compassionate?"}]], "function": [{"name": "get_bigfive_scores", "description": "Retrieve Big Five Personality trait scores based on individual's behavioural characteristics.", "parameters": {"type": "dict", "properties": {"characteristics": {"type": "array", "items": {"type": "string"}, "description": "List of user's behavioural characteristics."}, "scale": {"type": "string", "enum": ["high", "medium", "low"], "description": "The scoring scale of traits (default is medium)."}}, "required": ["characteristics"]}}]}, "model_result_raw": "get_bigfive_scores(characteristics=['efficient', 'organized', 'easy going', 'compassionate], scale='medium')", "possible_answer": [{"get_bigfive_scores": {"characteristics": [["efficient", "organized", "easy going", "compassionate"]], "scale": ["medium", ""]}}]}
{"id": "simple_234", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'region': 'Europe'. Expected one of ['Northern', 'Southern', 'Eastern', 'Western']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_234", "question": [[{"role": "user", "content": "Find important Wars in European history during the 19th century."}]], "function": [{"name": "history_eu.fetch_events", "description": "Fetches significant historical events within a specific time period in European history.", "parameters": {"type": "dict", "properties": {"century": {"type": "integer", "description": "The century you are interested in."}, "region": {"type": "string", "description": "The region of Europe you are interested in.", "enum": ["Northern", "Southern", "Eastern", "Western"]}, "category": {"type": "string", "description": "Category of the historical events. Default is 'Culture'.", "enum": ["Wars", "Culture", "Politics", "Scientific", "Others"]}}, "required": ["century", "region"]}}]}, "model_result_raw": "history_eu.fetch_events(century=19, region='Europe', category='Wars')", "model_result_decoded": [{"history_eu.fetch_events": {"century": 19, "region": "Europe", "category": "Wars"}}], "possible_answer": [{"history_eu.fetch_events": {"century": [19], "region": ["Northern", "Southern", "Eastern", "Western"], "category": ["Wars"]}}]}
{"id": "simple_235", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'Brussels'. Expected one of ['', 'Lisbon', 'Lisbon, Portugal']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_235", "question": [[{"role": "user", "content": "When was the signing of the Treaty of Lisbon?"}]], "function": [{"name": "get_event_date", "description": "Retrieve the date of a historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The name of the historical event."}, "location": {"type": "string", "description": "Location where the event took place. Default to global if not specified."}}, "required": ["event"]}}]}, "model_result_raw": "get_event_date(event='Treaty of Lisbon', location='Brussels')", "model_result_decoded": [{"get_event_date": {"event": "Treaty of Lisbon", "location": "Brussels"}}], "possible_answer": [{"get_event_date": {"event": ["Treaty of Lisbon", "Signing of the Treaty of Lisbon", "The signing of the Treaty of Lisbon"], "location": ["", "Lisbon", "Lisbon, Portugal"]}}]}
{"id": "simple_239", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Function name 'US_president.in_year' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "simple_239", "question": [[{"role": "user", "content": "Who was the full name of the president of the United States in 1861?"}]], "function": [{"name": "US_president.in_year", "description": "Retrieve the name of the U.S. president in a given year.", "parameters": {"type": "dict", "properties": {"year": {"type": "integer", "description": "The year in question."}, "full_name": {"type": "boolean", "default": true, "description": "Option to return full name with middle initial, if applicable."}}, "required": ["year"]}}]}, "model_result_raw": "in_year(year=1861, full_name=True)", "model_result_decoded": [{"in_year": {"year": 1861, "full_name": true}}], "possible_answer": [{"US_president.in_year": {"year": [1861], "full_name": [true, ""]}}]}
{"id": "simple_241", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event': 'American Civil War'. Expected one of ['Civil War']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_241", "question": [[{"role": "user", "content": "Who was the U.S. president during the Civil War?"}]], "function": [{"name": "US_President_During_Event", "description": "Returns the U.S. president during a specified historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The historical event."}, "country": {"type": "string", "description": "The country the president leads (optional parameter, defaults to 'USA' if not specified)."}}, "required": ["event"]}}]}, "model_result_raw": "US_President_During_Event(event='American Civil War', country='USA')", "model_result_decoded": [{"US_President_During_Event": {"event": "American Civil War", "country": "USA"}}], "possible_answer": [{"US_President_During_Event": {"event": ["Civil War"], "country": ["USA", ""]}}]}
{"id": "simple_244", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'work_title': 'Philosophi\u00e6 Naturalis Principia Mathematica'. Expected one of ['Law of Universal Gravitation', 'Universal Law of Gravitation', 'The law of universal gravitation']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_244", "question": [[{"role": "user", "content": "What year was the law of universal gravitation published by Isaac Newton?"}]], "function": [{"name": "publication_year.find", "description": "Fetches the year a particular scientific work was published.", "parameters": {"type": "dict", "properties": {"author": {"type": "string", "description": "Name of the author of the work."}, "work_title": {"type": "string", "description": "Title of the scientific work."}, "location": {"type": "string", "description": "Place of the publication, if known. Default to 'all'."}}, "required": ["author", "work_title"]}}]}, "model_result_raw": "publication_year.find(author='Isaac Newton', work_title='Philosophi\u00e6 Naturalis Principia Mathematica', location='all')", "model_result_decoded": [{"publication_year.find": {"author": "Isaac Newton", "work_title": "Philosophi\u00e6 Naturalis Principia Mathematica", "location": "all"}}], "possible_answer": [{"publication_year.find": {"author": ["Isaac Newton"], "work_title": ["Law of Universal Gravitation", "Universal Law of Gravitation", "The law of universal gravitation"], "location": ["", "all"]}}]}
{"id": "simple_249", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'include_people': True. Expected one of [False, '']."], "error_type": "value_error:others", "prompt": {"id": "simple_249", "question": [[{"role": "user", "content": "Tell me more about Christianity and its history till the 14th century"}]], "function": [{"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}]}, "model_result_raw": "religion.history_info(religion='Christianity', till_century=14, include_people=True)", "model_result_decoded": [{"religion.history_info": {"religion": "Christianity", "till_century": 14, "include_people": true}}], "possible_answer": [{"religion.history_info": {"religion": ["Christianity"], "till_century": [14], "include_people": [false, ""]}}]}
{"id": "simple_267", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": [[{"role": "user", "content": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month."}]], "function": [{"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}]}, "model_result_raw": "find_exhibition(location='New York', art_form='sculpture', month='upcoming', user_ratings='high')", "model_result_decoded": [{"find_exhibition": {"location": "New York", "art_form": "sculpture", "month": "upcoming", "user_ratings": "high"}}], "possible_answer": [{"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}]}
{"id": "simple_277", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': '2023-06-17'. Expected one of ['2023-06-20']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_277", "question": [[{"role": "user", "content": "Find the working hours and ticket price of The British Museum for this weekend, Jun.20,2023."}]], "function": [{"name": "museum_info", "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.", "parameters": {"type": "dict", "properties": {"museum": {"type": "string", "description": "The name of the museum."}, "date": {"type": "string", "description": "The specific date for which information is needed, in the format of YYYY-MM-DD such as '2022-12-01'."}, "information": {"type": "array", "items": {"type": "string", "enum": ["opening_hours", "ticket_price", "address"]}, "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", "default": "all"}}, "required": ["museum", "date"]}}]}, "model_result_raw": "museum_info(museum='The British Museum', date='2023-06-17', information=['opening_hours', 'ticket_price'])", "model_result_decoded": [{"museum_info": {"museum": "The British Museum", "date": "2023-06-17", "information": ["opening_hours", "ticket_price"]}}], "possible_answer": [{"museum_info": {"museum": ["The British Museum"], "date": ["2023-06-20"], "information": [["opening_hours", "ticket_price"], ["ticket_price", "opening_hours"]]}}]}
{"id": "simple_298", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. closing parenthesis ')' does not match opening parenthesis '{' (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_298", "question": [[{"role": "user", "content": "What key signature does C# major have?"}]], "function": [{"name": "music_theory.key_signature", "description": "Return the key signature of a major or minor scale.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The root of the scale, e.g., 'C', 'F#', 'Ab'."}, "scale_type": {"type": "string", "enum": ["major", "minor"], "description": "Type of the scale, either 'major' or 'minor'. Default is 'major'."}}, "required": ["key"]}}]}, "model_result_raw": "music_theory.key_signature(key={'key': 'C#', scale_type='major')", "possible_answer": [{"music_theory.key_signature": {"key": ["C#"], "scale_type": ["major", ""]}}]}
{"id": "simple_349", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. invalid character '\u2019' (U+2019) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_349", "question": [[{"role": "user", "content": "Find the highest score achieved by any player in the online game 'Overwatch' on PC globally."}]], "function": [{"name": "game_score.highest", "description": "Retrieve the highest score achieved by any player in a specific game.", "parameters": {"type": "dict", "properties": {"game": {"type": "string", "description": "The name of the online game."}, "platform": {"type": "string", "description": "The platform where the game is played, e.g. PC, Xbox, Playstation"}, "region": {"type": "string", "description": "The geographic region of the player. Defaults to 'Global'"}}, "required": ["game", "platform"]}}]}, "model_result_raw": "game_score.highest(game=\u2019Overwatch\u2019, platform=\u2019PC\u2019, region=\u2019Global\u2019)", "possible_answer": [{"game_score.highest": {"game": ["Overwatch"], "platform": ["PC"], "region": ["Global", ""]}}]}
{"id": "simple_365", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'quantity': 32. Expected one of [2]."], "error_type": "value_error:others", "prompt": {"id": "simple_365", "question": [[{"role": "user", "content": "How many ounces in 2 pounds of butter?"}]], "function": [{"name": "cooking_conversion.convert", "description": "Convert cooking measurements from one unit to another.", "parameters": {"type": "dict", "properties": {"quantity": {"type": "integer", "description": "The quantity to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from."}, "to_unit": {"type": "string", "description": "The unit to convert to."}, "item": {"type": "string", "description": "The item to be converted."}}, "required": ["quantity", "from_unit", "to_unit", "item"]}}]}, "model_result_raw": "cooking_conversion.convert(quantity=32, from_unit='pounds', to_unit='ounces', item='butter')", "model_result_decoded": [{"cooking_conversion.convert": {"quantity": 32, "from_unit": "pounds", "to_unit": "ounces", "item": "butter"}}], "possible_answer": [{"cooking_conversion.convert": {"quantity": [2], "from_unit": ["pound", "pounds", "lb", "lbs"], "to_unit": ["ounce", "ounces", "oz"], "item": ["butter"]}}]}
{"id": "simple_367", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Unexpected parameter: 'type'."], "error_type": "simple_function_checker:unexpected_param", "prompt": {"id": "simple_367", "question": [[{"role": "user", "content": "Find me a vegan recipe for brownies which prep time is under 30 minutes."}]], "function": [{"name": "find_recipe", "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.", "parameters": {"type": "dict", "properties": {"dietary_restrictions": {"type": "string", "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."}, "recipe_type": {"type": "string", "description": "Type of the recipe. E.g. dessert, main course, breakfast."}, "time": {"type": "integer", "description": "Time limit in minutes to prep the meal."}}, "required": ["dietary_restrictions", "recipe_type", "time"]}}]}, "model_result_raw": "find_recipe(type='dessert', recipe_type='brownies', dietary_restrictions='vegan', time=30)", "model_result_decoded": [{"find_recipe": {"type": "dessert", "recipe_type": "brownies", "dietary_restrictions": "vegan", "time": 30}}], "possible_answer": [{"find_recipe": {"dietary_restrictions": ["vegan"], "recipe_type": ["dessert"], "time": [30]}}]}
{"id": "simple_370", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['olive oil', 'olive oil', 'olive oil', 'rice', 'rice', 'rice', 'rice', 'rice', 'rice']. Expected one of [['olive oil', 'rice'], ['olive oil', 'bag of rice']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_370", "question": [[{"role": "user", "content": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto."}]], "function": [{"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}]}, "model_result_raw": "safeway.order(location='Palo Alto, CA', items=['olive oil', 'olive oil', 'olive oil', 'rice', 'rice', 'rice', 'rice', 'rice', 'rice'], quantity=[1, 1, 1, 5])", "model_result_decoded": [{"safeway.order": {"location": "Palo Alto, CA", "items": ["olive oil", "olive oil", "olive oil", "rice", "rice", "rice", "rice", "rice", "rice"], "quantity": [1, 1, 1, 5]}}], "possible_answer": [{"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}]}
{"id": "simple_373", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product_list': ['apples', 'rice', '12-pack bottled water']. Expected one of [['apples', 'rice', 'bottled water'], ['apples', 'rice', 'water']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_373", "question": [[{"role": "user", "content": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability."}]], "function": [{"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}]}, "model_result_raw": "walmart.purchase(loc='San Jose', product_list=['apples', 'rice', '12-pack bottled water'])", "model_result_decoded": [{"walmart.purchase": {"loc": "San Jose", "product_list": ["apples", "rice", "12-pack bottled water"]}}], "possible_answer": [{"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}]}
{"id": "simple_375", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'quantities': [3, 12]. Expected one of [[3, 24], [3, 2]]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_375", "question": [[{"role": "user", "content": "Check the total price for three pumpkins and two dozen eggs at Walmart."}]], "function": [{"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}]}, "model_result_raw": "walmart.check_price(items=['pumpkins', 'eggs'], quantities=[3, 12])", "model_result_decoded": [{"walmart.check_price": {"items": ["pumpkins", "eggs"], "quantities": [3, 12]}}], "possible_answer": [{"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"]], "quantities": [[3, 24], [3, 2]], "store_location": [""]}}]}
{"id": "simple_378", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'from_timezone': 'US/Eastern'. Expected one of ['America/New_York', 'New York', 'NYC', 'New York City']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_378", "question": [[{"role": "user", "content": "Convert time 3pm from New York time zone to London time zone."}]], "function": [{"name": "timezone.convert", "description": "Convert time from one time zone to another.", "parameters": {"type": "dict", "properties": {"time": {"type": "string", "description": "The local time you want to convert, e.g. 3pm"}, "from_timezone": {"type": "string", "description": "The time zone you want to convert from."}, "to_timezone": {"type": "string", "description": "The time zone you want to convert to."}}, "required": ["time", "from_timezone", "to_timezone"]}}]}, "model_result_raw": "timezone.convert(time='3pm', from_timezone='US/Eastern', to_timezone='Europe/London')", "model_result_decoded": [{"timezone.convert": {"time": "3pm", "from_timezone": "US/Eastern", "to_timezone": "Europe/London"}}], "possible_answer": [{"timezone.convert": {"time": ["3pm"], "from_timezone": ["America/New_York", "New York", "NYC", "New York City"], "to_timezone": ["Europe/London", "London"]}}]}
{"id": "simple_380", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. closing parenthesis ')' does not match opening parenthesis '[' (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_380", "question": [[{"role": "user", "content": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023."}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}]}, "model_result_raw": "hotel_booking(location='Manhattan, New York', room_type='single', duration=3, start_date='2023-03-10', preferences=['pet_friendly'))", "possible_answer": [{"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City"], "room_type": ["single"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023"], "preferences": [["pet_friendly"]]}}]}
{"id": "simple_387", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City, NY', 'New York, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_387", "question": [[{"role": "user", "content": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022"}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}]}, "model_result_raw": "hotel_booking(hotel_name='Plaza Hotel', location='New York', start_date='2022-06-01', end_date='2022-06-04', rooms=1)", "model_result_decoded": [{"hotel_booking": {"hotel_name": "Plaza Hotel", "location": "New York", "start_date": "2022-06-01", "end_date": "2022-06-04", "rooms": 1}}], "possible_answer": [{"hotel_booking": {"hotel_name": ["Plaza Hotel"], "location": ["New York City, NY", "New York, NY"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022"], "rooms": [1, ""]}}]}
{"id": "simple_392", "model_name": "meta-llama_Meta-Llama-3-8B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_392", "question": [[{"role": "user", "content": "Get me the latest exchange rate from British Pounds to Japanese Yen."}]], "function": [{"name": "latest_exchange_rate", "description": "Retrieve the latest exchange rate between two specified currencies.", "parameters": {"type": "dict", "properties": {"source_currency": {"type": "string", "description": "The currency you are converting from."}, "target_currency": {"type": "string", "description": "The currency you are converting to."}, "amount": {"type": "float", "description": "The amount to be converted. If omitted, default to exchange rate of 1 unit source currency"}}, "required": ["source_currency", "target_currency"]}}]}, "model_result_raw": "latest_exchange_rate(source_currency='GBP', target_currency='JPY)", "possible_answer": [{"latest_exchange_rate": {"source_currency": ["GBP", "British Pounds", "Pounds Sterling"], "target_currency": ["JPY", "Japanese Yen"], "amount": ["", 1.0]}}]}