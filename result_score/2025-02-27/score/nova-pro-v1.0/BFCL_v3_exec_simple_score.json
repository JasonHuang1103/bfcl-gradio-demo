{"accuracy": 0.97, "correct_count": 97, "total_count": 100}
{"id": "exec_simple_52", "model_name": "nova-pro-v1.0", "test_category": "exec_simple", "valid": false, "error": ["Wrong execution result pattern for \"get_stock_history(stock_name='AAPL',interval='1mo',diffandsplits='true')\". Expect type Dict, but key '1736961952' not found in the model output."], "error_type": "executable_checker:wrong_result_type:dict_key_not_found", "prompt": {"id": "exec_simple_52", "question": [[{"role": "user", "content": "I've been tracking the performance of Apple's stock and I'm interested in taking a deeper dive into its history. I want to see the monthly trends and also check if there have been any splits or dividends issued recently. Can you pull up the history of AAPL for me with a monthly interval and include the stock splits and dividends information?"}]], "function": [{"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "string", "description": "The diff and splits of the stock history. Allows one of following : true|false. Default as false"}}, "required": ["stock_name", "interval"]}}], "execution_result_type": ["structural_match"], "ground_truth": ["get_stock_history(stock_name='AAPL', interval='1mo', diffandsplits='true')"], "execution_result": [{"1714536000": {"date": "01-05-2024", "date_utc": 1714536000, "open": 169.58, "high": 193, "low": 169.11, "close": 192.25, "volume": 1336537700, "adjclose": 191.56}, "1717214400": {"date": "01-06-2024", "date_utc": 1717214400, "open": 192.9, "high": 220.2, "low": 192.15, "close": 210.62, "volume": 1723984500, "adjclose": 210.15}, "1719806400": {"date": "01-07-2024", "date_utc": 1719806400, "open": 212.09, "high": 237.23, "low": 211.92, "close": 222.08, "volume": 1153099800, "adjclose": 221.58}, "1722484800": {"date": "01-08-2024", "date_utc": 1722484800, "open": 224.37, "high": 232.92, "low": 196, "close": 229, "volume": 1122667000, "adjclose": 228.48}, "1725163200": {"date": "01-09-2024", "date_utc": 1725163200, "open": 228.55, "high": 233.09, "low": 213.92, "close": 233, "volume": 1232140300, "adjclose": 232.74}, "1727755200": {"date": "01-10-2024", "date_utc": 1727755200, "open": 229.52, "high": 237.49, "low": 221.33, "close": 225.91, "volume": 930736000, "adjclose": 225.66}, "1730433600": {"date": "01-11-2024", "date_utc": 1730433600, "open": 220.97, "high": 237.81, "low": 219.71, "close": 237.33, "volume": 891640600, "adjclose": 237.07}, "1733029200": {"date": "01-12-2024", "date_utc": 1733029200, "open": 237.27, "high": 260.1, "low": 237.16, "close": 250.42, "volume": 977916100, "adjclose": 250.42}, "1735707600": {"date": "01-01-2025", "date_utc": 1735707600, "open": 248.93, "high": 249.1, "low": 229.72, "close": 233.28, "volume": 370244000, "adjclose": 233.28}, "1736961952": {"date": "15-01-2025", "date_utc": 1736961952, "open": 234.64, "high": 238.54, "low": 234.43, "close": 237.18, "volume": 15099253, "adjclose": 237.18}}]}, "model_result_raw": [{"get_stock_history": {"stock_name": "AAPL", "interval": "1mo", "diffandsplits": "true"}}], "model_result_decoded": ["get_stock_history(stock_name='AAPL',interval='1mo',diffandsplits='true')"], "model_executed_output": {"1714536000": {"date": "01-05-2024", "date_utc": 1714536000, "open": 169.58, "high": 193, "low": 169.11, "close": 192.25, "volume": 1336537700, "adjclose": 191.56}, "1717214400": {"date": "01-06-2024", "date_utc": 1717214400, "open": 192.9, "high": 220.2, "low": 192.15, "close": 210.62, "volume": 1723984500, "adjclose": 210.15}, "1719806400": {"date": "01-07-2024", "date_utc": 1719806400, "open": 212.09, "high": 237.23, "low": 211.92, "close": 222.08, "volume": 1153099800, "adjclose": 221.58}, "1722484800": {"date": "01-08-2024", "date_utc": 1722484800, "open": 224.37, "high": 232.92, "low": 196, "close": 229, "volume": 1122667000, "adjclose": 228.48}, "1725163200": {"date": "01-09-2024", "date_utc": 1725163200, "open": 228.55, "high": 233.09, "low": 213.92, "close": 233, "volume": 1232140300, "adjclose": 232.74}, "1727755200": {"date": "01-10-2024", "date_utc": 1727755200, "open": 229.52, "high": 237.49, "low": 221.33, "close": 225.91, "volume": 930736000, "adjclose": 225.66}, "1730433600": {"date": "01-11-2024", "date_utc": 1730433600, "open": 220.97, "high": 237.81, "low": 219.71, "close": 237.33, "volume": 891640600, "adjclose": 237.07}, "1733029200": {"date": "01-12-2024", "date_utc": 1733029200, "open": 237.27, "high": 260.1, "low": 237.16, "close": 250.42, "volume": 977916100, "adjclose": 250.42}, "1735707600": {"date": "01-01-2025", "date_utc": 1735707600, "open": 248.93, "high": 249.1, "low": 229.72, "close": 233.28, "volume": 370244000, "adjclose": 233.28}, "1736962627": {"date": "15-01-2025", "date_utc": 1736962627, "open": 234.64, "high": 238.54, "low": 234.43, "close": 237.38, "volume": 15569311, "adjclose": 237.38}}}
{"id": "exec_simple_53", "model_name": "nova-pro-v1.0", "test_category": "exec_simple", "valid": false, "error": ["Wrong execution result pattern for \"get_stock_history(stock_name='MSFT',interval='1wk',diffandsplits='false')\". Expect type Dict, but key '1736961952' not found in the model output."], "error_type": "executable_checker:wrong_result_type:dict_key_not_found", "prompt": {"id": "exec_simple_53", "question": [[{"role": "user", "content": "I need to analyze Microsoft's stock performance over the past few months without the noise from dividends or stock splits. Can you pull up the weekly historical data for the stock symbol 'MSFT' making sure to exclude splits and dividends in the data set?"}]], "function": [{"name": "get_stock_history", "description": "Finds the price of a stock by its stock name.", "parameters": {"type": "dict", "properties": {"stock_name": {"type": "string", "description": "The stock name of the product, in the format of the stock symbol."}, "interval": {"type": "string", "description": "The interval of the stock history. Allows one of following : 5m|15m|30m|1h|1d|1wk|1mo|3mo"}, "diffandsplits": {"type": "string", "description": "The diff and splits of the stock history. Allows one of following : true|false. Default as false"}}, "required": ["stock_name", "interval"]}}], "execution_result_type": ["structural_match"], "ground_truth": ["get_stock_history(stock_name='MSFT', interval='1wk', diffandsplits='true')"], "execution_result": [{"1731906000": {"date": "18-11-2024", "date_utc": 1731906000, "open": 414.87, "high": 419.78, "low": 410.29, "close": 417, "volume": 107662000, "adjclose": 416.17}, "1732510800": {"date": "25-11-2024", "date_utc": 1732510800, "open": 418.38, "high": 429.04, "low": 414.85, "close": 423.46, "volume": 85754300, "adjclose": 423.46}, "1733115600": {"date": "02-12-2024", "date_utc": 1733115600, "open": 421.57, "high": 446.1, "low": 421.31, "close": 443.57, "volume": 105037400, "adjclose": 443.57}, "1733720400": {"date": "09-12-2024", "date_utc": 1733720400, "open": 442.6, "high": 456.16, "low": 440.5, "close": 447.27, "volume": 97826700, "adjclose": 447.27}, "1734325200": {"date": "16-12-2024", "date_utc": 1734325200, "open": 447.27, "high": 455.29, "low": 428.63, "close": 436.6, "volume": 158004200, "adjclose": 436.6}, "1734930000": {"date": "23-12-2024", "date_utc": 1734930000, "open": 436.74, "high": 440.94, "low": 426.35, "close": 430.53, "volume": 52628900, "adjclose": 430.53}, "1735534800": {"date": "30-12-2024", "date_utc": 1735534800, "open": 426.06, "high": 427.55, "low": 414.85, "close": 423.35, "volume": 59964600, "adjclose": 423.35}, "1736139600": {"date": "06-01-2025", "date_utc": 1736139600, "open": 428, "high": 434.32, "low": 415.02, "close": 418.95, "volume": 73968400, "adjclose": 418.95}, "1736744400": {"date": "13-01-2025", "date_utc": 1736744400, "open": 415.24, "high": 419.74, "low": 410.72, "close": 415.67, "volume": 34514400, "adjclose": 415.67}, "1736961952": {"date": "15-01-2025", "date_utc": 1736961952, "open": 419.13, "high": 427.42, "low": 418.27, "close": 425.2, "volume": 7059609, "adjclose": 425.2}}]}, "model_result_raw": [{"get_stock_history": {"stock_name": "MSFT", "interval": "1wk", "diffandsplits": "false"}}], "model_result_decoded": ["get_stock_history(stock_name='MSFT',interval='1wk',diffandsplits='false')"], "model_executed_output": {"1731906000": {"date": "18-11-2024", "date_utc": 1731906000, "open": 414.87, "high": 419.78, "low": 410.29, "close": 417, "volume": 107662000, "adjclose": 416.17}, "1732510800": {"date": "25-11-2024", "date_utc": 1732510800, "open": 418.38, "high": 429.04, "low": 414.85, "close": 423.46, "volume": 85754300, "adjclose": 423.46}, "1733115600": {"date": "02-12-2024", "date_utc": 1733115600, "open": 421.57, "high": 446.1, "low": 421.31, "close": 443.57, "volume": 105037400, "adjclose": 443.57}, "1733720400": {"date": "09-12-2024", "date_utc": 1733720400, "open": 442.6, "high": 456.16, "low": 440.5, "close": 447.27, "volume": 97826700, "adjclose": 447.27}, "1734325200": {"date": "16-12-2024", "date_utc": 1734325200, "open": 447.27, "high": 455.29, "low": 428.63, "close": 436.6, "volume": 158004200, "adjclose": 436.6}, "1734930000": {"date": "23-12-2024", "date_utc": 1734930000, "open": 436.74, "high": 440.94, "low": 426.35, "close": 430.53, "volume": 52628900, "adjclose": 430.53}, "1735534800": {"date": "30-12-2024", "date_utc": 1735534800, "open": 426.06, "high": 427.55, "low": 414.85, "close": 423.35, "volume": 59964600, "adjclose": 423.35}, "1736139600": {"date": "06-01-2025", "date_utc": 1736139600, "open": 428, "high": 434.32, "low": 415.02, "close": 418.95, "volume": 73968400, "adjclose": 418.95}, "1736744400": {"date": "13-01-2025", "date_utc": 1736744400, "open": 415.24, "high": 419.74, "low": 410.72, "close": 415.67, "volume": 34514400, "adjclose": 415.67}, "1736962628": {"date": "15-01-2025", "date_utc": 1736962628, "open": 419.13, "high": 427.42, "low": 418.27, "close": 425.5, "volume": 7277912, "adjclose": 425.5}}}
{"id": "exec_simple_81", "model_name": "nova-pro-v1.0", "test_category": "exec_simple", "valid": false, "error": ["Error in execution: 'add_binary_numbers(a=10011,b=1100)'. Error: int() can't convert non-string with explicit base"], "error_type": "executable_checker:execution_error", "prompt": {"id": "exec_simple_81", "question": [[{"role": "user", "content": "I'm working on a small project in which I need to perform binary calculations. Could you help me with adding the binary numbers '10011' and '1100' together?"}]], "function": [{"name": "add_binary_numbers", "description": "Adds two binary numbers.", "parameters": {"type": "dict", "properties": {"a": {"type": "string", "description": "The first binary number."}, "b": {"type": "string", "description": "The second binary number."}}, "required": ["a", "b"]}}], "execution_result_type": ["exact_match"], "ground_truth": ["add_binary_numbers(a='10011',b='1100')"], "execution_result": ["11111"]}, "model_result_raw": [{"add_binary_numbers": {"a": 10011, "b": 1100}}], "model_result_decoded": ["add_binary_numbers(a=10011,b=1100)"]}