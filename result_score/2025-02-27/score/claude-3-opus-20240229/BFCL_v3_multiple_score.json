{"accuracy": 0.95, "correct_count": 190, "total_count": 200}
{"id": "multiple_7", "model_name": "claude-3-opus-20240229", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_7", "question": [[{"role": "user", "content": "How to assess the population growth in deer and their impact on woodland in Washington state over the past decade?"}]], "function": [{"name": "wildlife_population.assess_growth", "description": "Assesses the population growth of a specific species in a specified location over a period.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which the growth is to be calculated."}, "location": {"type": "string", "description": "The area where the species is present."}, "duration": {"type": "integer", "description": "The time period for which the population growth should be calculated in years."}}, "required": ["species", "location", "duration"]}}, {"name": "ecological_impact.analyze", "description": "Analyzes the impact of a species on a particular ecosystem.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species whose impact is to be calculated."}, "ecosystem": {"type": "string", "description": "The ecosystem being affected."}, "location": {"type": "string", "description": "The area where the impact is analyzed."}, "timeframe": {"type": "integer", "description": "The time period for which the impact analysis should be carried out in years.", "default": 5}}, "required": ["species", "ecosystem", "location"]}}]}, "model_result_raw": "[wildlife_population.assess_growth(species=\"deer\", location=\"Washington state\", duration=10), ecological_impact.analyze(species=\"deer\", ecosystem=\"woodland\", location=\"Washington state\", timeframe=10)]", "model_result_decoded": [{"wildlife_population.assess_growth": {"species": "deer", "location": "Washington state", "duration": 10}}, {"ecological_impact.analyze": {"species": "deer", "ecosystem": "woodland", "location": "Washington state", "timeframe": 10}}], "possible_answer": [{"wildlife_population.assess_growth": {"species": ["deer", "Deer"], "location": ["Washington state", "WA", "Washington"], "duration": [10]}}]}
{"id": "multiple_10", "model_name": "claude-3-opus-20240229", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_10", "question": [[{"role": "user", "content": "I need to delete some columns from my employees database on personal_data table. I want to remove their email addresses and social security numbers to respect privacy."}]], "function": [{"name": "database.modify_columns", "description": "This function allows deletion or addition of columns in a database", "parameters": {"type": "dict", "properties": {"db_name": {"type": "string", "description": "The name of the database to modify."}, "table": {"type": "string", "description": "The name of the table to modify."}, "operation": {"type": "string", "description": "The operation to carry out on the table. Can be 'delete' or 'add'."}, "columns": {"type": "array", "description": "List of the columns to add or delete from the table.", "items": {"type": "string"}}}, "required": ["db_name", "table", "operation", "columns"]}}, {"name": "database.create_backup", "description": "This function creates a backup of the database before modification", "parameters": {"type": "dict", "properties": {"db_name": {"type": "string", "description": "The name of the database to create a backup of."}, "backup_location": {"type": "string", "description": "The file path where the backup should be stored."}, "timestamp": {"type": "boolean", "description": "Option to append a timestamp to the backup file name.", "default": "False"}}, "required": ["db_name", "backup_location"]}}]}, "model_result_raw": "[database.create_backup(db_name='employees', backup_location='/backups/employees.sql', timestamp=True), database.modify_columns(db_name='employees', table='personal_data', operation='delete', columns=['email', 'ssn'])]", "model_result_decoded": [{"database.create_backup": {"db_name": "employees", "backup_location": "/backups/employees.sql", "timestamp": true}}, {"database.modify_columns": {"db_name": "employees", "table": "personal_data", "operation": "delete", "columns": ["email", "ssn"]}}], "possible_answer": [{"database.modify_columns": {"db_name": ["employees"], "table": ["personal_data"], "operation": ["delete"], "columns": [["email", "ssn"], ["ssn", "email"], ["email", "social_security_number"], ["social_security_number", "email"], ["email", "social security number"], ["social security number", "email"]]}}]}
{"id": "multiple_13", "model_name": "claude-3-opus-20240229", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_13", "question": [[{"role": "user", "content": "How much revenue would company XYZ generate if we increase the sales units of product A by 10% while keeping the price the same?"}]], "function": [{"name": "corporate_finance.product_price", "description": "Fetch the current selling price of the product.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company that sells the product."}, "product": {"type": "string", "description": "The product whose price we want to fetch."}}, "required": ["company", "product"]}}, {"name": "corporate_finance.revenue_forecast", "description": "Estimate the revenue of a company by multiplying the sales units of the product with its selling price.", "parameters": {"type": "dict", "properties": {"company": {"type": "string", "description": "The company that you want to calculate the revenue for."}, "product": {"type": "string", "description": "The product sold by the company."}, "sales_units_increase_percentage": {"type": "integer", "description": "Percentage increase in the sales units. This value is optional and defaults to zero if not provided."}}, "required": ["company", "product"]}}]}, "model_result_raw": "[corporate_finance.product_price(company='XYZ', product='A'), corporate_finance.revenue_forecast(company='XYZ', product='A', sales_units_increase_percentage=10)]", "model_result_decoded": [{"corporate_finance.product_price": {"company": "XYZ", "product": "A"}}, {"corporate_finance.revenue_forecast": {"company": "XYZ", "product": "A", "sales_units_increase_percentage": 10}}], "possible_answer": [{"corporate_finance.revenue_forecast": {"company": ["XYZ"], "product": ["A", "Product A"], "sales_units_increase_percentage": [10]}}]}
{"id": "multiple_51", "model_name": "claude-3-opus-20240229", "test_category": "multiple", "valid": false, "error": ["Optional parameter 'n_rolls' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "multiple_51", "question": [[{"role": "user", "content": "Calculate the probability of rolling a sum of 7 on a roll of two dice."}]], "function": [{"name": "dice_roll_probability", "description": "Calculate the probability of a specific sum appearing from rolling two dice.", "parameters": {"type": "dict", "properties": {"desired_sum": {"type": "integer", "description": "The sum for which to calculate the probability."}, "n_rolls": {"type": "integer", "description": "Number of dice to be rolled. Default is 1", "optional": true}, "sides_per_die": {"type": "integer", "description": "Number of sides on each die."}}, "required": ["desired_sum", "sides_per_die"]}}, {"name": "flip_coin_probability", "description": "Calculate the probability of a specific outcome appearing from flipping a coin.", "parameters": {"type": "dict", "properties": {"desired_outcome": {"type": "string", "description": "The outcome for which to calculate the probability."}, "n_flips": {"type": "integer", "description": "Number of coins to be flipped. Default 1", "optional": true}}, "required": ["desired_outcome"]}}, {"name": "shuffle_card_probability", "description": "Calculate the probability of a specific card appearing from a shuffled deck.", "parameters": {"type": "dict", "properties": {"desired_card": {"type": "string", "description": "The card for which to calculate the probability."}, "n_decks": {"type": "integer", "description": "Number of decks to shuffle. Default 1", "optional": true}}, "required": ["desired_card"]}}]}, "model_result_raw": "[dice_roll_probability(desired_sum=7, sides_per_die=6)]", "model_result_decoded": [{"dice_roll_probability": {"desired_sum": 7, "sides_per_die": 6}}], "possible_answer": [{"dice_roll_probability": {"desired_sum": [7], "sides_per_die": [6], "n_rolls": [2]}}]}
{"id": "multiple_53", "model_name": "claude-3-opus-20240229", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_53", "question": [[{"role": "user", "content": "Predict the house prices for next 5 years based on interest rates and unemployment rates."}]], "function": [{"name": "linear_regression", "description": "Applies linear regression to a given set of independent variables to make a prediction.", "parameters": {"type": "dict", "properties": {"independent_var": {"type": "array", "items": {"type": "string"}, "description": "The independent variables."}, "dependent_var": {"type": "string", "description": "The dependent variable."}, "forecast_period": {"type": "integer", "description": "The number of years to forecast the prices. Default 1", "optional": true}}, "required": ["independent_var", "dependent_var"]}}, {"name": "random_forest_regression", "description": "Applies Random Forest Regression to a given set of independent variables to make a prediction.", "parameters": {"type": "dict", "properties": {"independent_var": {"type": "array", "items": {"type": "string"}, "description": "The independent variables."}, "dependent_var": {"type": "string", "description": "The dependent variable."}, "n_estimators": {"type": "integer", "description": "The number of trees in the forest. Default 1", "optional": true}, "forecast_period": {"type": "integer", "description": "The number of years to forecast the prices. Default 1", "optional": true}}, "required": ["independent_var", "dependent_var"]}}]}, "model_result_raw": "[linear_regression(independent_var=['interest_rates', 'unemployment_rates'], dependent_var='house_prices', forecast_period=5), random_forest_regression(independent_var=['interest_rates', 'unemployment_rates'], dependent_var='house_prices', n_estimators=100, forecast_period=5)]", "model_result_decoded": [{"linear_regression": {"independent_var": ["interest_rates", "unemployment_rates"], "dependent_var": "house_prices", "forecast_period": 5}}, {"random_forest_regression": {"independent_var": ["interest_rates", "unemployment_rates"], "dependent_var": "house_prices", "n_estimators": 100, "forecast_period": 5}}], "possible_answer": [{"linear_regression": {"independent_var": [["interest rates", "unemployment rates"], ["interest_rate", "unemployment_rate"], ["interest rate", "unemployment rate"]], "dependent_var": ["house_price", "house price"], "forecast_period": [5]}}]}
{"id": "multiple_58", "model_name": "claude-3-opus-20240229", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'expertise': 'Marriage'. Expected one of ['Divorce']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_58", "question": [[{"role": "user", "content": "Search for divorce law specialists in Los Angeles"}]], "function": [{"name": "doctor.search", "description": "Search for a doctor based on area of expertise and location", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "specialization": {"type": "string", "description": "Medical specialization. For example, 'Cardiology', 'Orthopedics', 'Gynecology'."}}, "required": ["location", "specialization"]}}, {"name": "lawyer.search", "description": "Search for a lawyer based on area of expertise and location", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Los Angeles, CA"}, "expertise": {"type": "string", "description": "Area of legal expertise. For example, 'Marriage', 'Criminal', 'Business'."}}, "required": ["location", "expertise"]}}]}, "model_result_raw": "[lawyer.search(location='Los Angeles, CA', expertise='Marriage')]", "model_result_decoded": [{"lawyer.search": {"location": "Los Angeles, CA", "expertise": "Marriage"}}], "possible_answer": [{"lawyer.search": {"location": ["Los Angeles", "Los Angeles, CA", "LA"], "expertise": ["Divorce"]}}]}
{"id": "multiple_61", "model_name": "claude-3-opus-20240229", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'specialization': 'residential design'. Expected one of ['small space garden design']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_61", "question": [[{"role": "user", "content": "Find a Landscape Architect who is experienced 5 years in small space garden design in Portland"}]], "function": [{"name": "home_renovation_expert.find_specialty", "description": "Search for a home renovation expert based on the location and specialization", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the professional is based, e.g. Portland, OR."}, "specialization": {"type": "string", "description": "A specific area of expertise, such as kitchen or bathroom renovation."}, "years_experience": {"type": "integer", "description": "Number of years the professional has been practicing in their field. (optional)", "default": 0}}, "required": ["location", "specialization"]}}, {"name": "landscape_architect.find_specialty", "description": "Search for a landscape architect based on the location and specialization", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the professional is based, e.g. Portland, OR."}, "specialization": {"type": "string", "description": "A specific area of expertise. Common areas include residential design, commercial design, urban design, and park design."}, "years_experience": {"type": "integer", "description": "Number of years the professional has been practicing in their field. (optional)", "default": 0}}, "required": ["location", "specialization"]}}]}, "model_result_raw": "[landscape_architect.find_specialty(location='Portland, OR', specialization='residential design', years_experience=5)]", "model_result_decoded": [{"landscape_architect.find_specialty": {"location": "Portland, OR", "specialization": "residential design", "years_experience": 5}}], "possible_answer": [{"landscape_architect.find_specialty": {"location": ["Portland", "Portland, OR"], "specialization": ["small space garden design"], "years_experience": [5]}}]}
{"id": "multiple_80", "model_name": "claude-3-opus-20240229", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'services': ['Guitar Lessons', 'Violin Lessons']. Expected one of [['Violin Lessons']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "multiple_80", "question": [[{"role": "user", "content": "Find a local guitar shop that also offers violin lessons in Nashville."}]], "function": [{"name": "music_shop.find_nearby", "description": "Locate nearby music shops based on specific criteria like instrument lessons availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "services": {"type": "array", "items": {"type": "string", "enum": ["Guitar Lessons", "Violin Lessons", "Piano Lessons", "Ukulele Lessons"]}, "description": "Types of instrument lessons offered in the shop. Default empty array"}, "instruments": {"type": "array", "items": {"type": "string", "enum": ["Guitars", "Violins", "Pianos", "Drums"]}, "description": "Types of instruments sold in the shop. Default empty array"}}, "required": ["location"]}}, {"name": "gym.find_nearby", "description": "Locate nearby gyms based on specific criteria like types of fitness classes availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state, e.g. Nashville, TN"}, "classes": {"type": "array", "items": {"type": "string", "enum": ["Yoga", "Spin", "Zumba", "CrossFit"]}, "description": "Types of fitness classes offered in the gym. Default empty array"}, "equipment": {"type": "array", "items": {"type": "string", "enum": ["Treadmills", "Ellipticals", "Weight Machines", "Free Weights"]}, "description": "Types of gym equipment available. Default empty array"}}, "required": ["location"]}}]}, "model_result_raw": "[music_shop.find_nearby(location='Nashville, TN', services=['Guitar Lessons', 'Violin Lessons'])]", "model_result_decoded": [{"music_shop.find_nearby": {"location": "Nashville, TN", "services": ["Guitar Lessons", "Violin Lessons"]}}], "possible_answer": [{"music_shop.find_nearby": {"location": ["Nashville, TN", "Nashville"], "services": [["Violin Lessons"]], "instruments": [["Guitars"]]}}]}
{"id": "multiple_91", "model_name": "claude-3-opus-20240229", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'ingredientLimit': 5. Expected one of [4]."], "error_type": "value_error:others", "prompt": {"id": "multiple_91", "question": [[{"role": "user", "content": "Can I find a good cooking recipe for apple pie using less than 5 ingredients?"}]], "function": [{"name": "restaurant.find", "description": "Locate restaurants based on specific criteria such as cuisine and price range", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "The type of cuisine preferred."}, "price": {"type": "array", "items": {"type": "string"}, "description": "Price range of the restaurant in format ['low', 'mid', 'high']. Default ['low', 'mid', 'high']"}}, "required": ["cuisine"]}}, {"name": "recipe.find", "description": "Locate cooking recipes based on specific criteria such as main ingredient and number of ingredients", "parameters": {"type": "dict", "properties": {"mainIngredient": {"type": "string", "description": "Main ingredient for the recipe."}, "ingredientLimit": {"type": "integer", "description": "Max number of ingredients the recipe should use."}}, "required": ["mainIngredient", "ingredientLimit"]}}]}, "model_result_raw": "[recipe.find(mainIngredient='apple', ingredientLimit=5)]", "model_result_decoded": [{"recipe.find": {"mainIngredient": "apple", "ingredientLimit": 5}}], "possible_answer": [{"recipe.find": {"mainIngredient": ["apple pie", "apple"], "ingredientLimit": [4]}}]}
{"id": "multiple_149", "model_name": "claude-3-opus-20240229", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_149", "question": [[{"role": "user", "content": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'."}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}, {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}, {"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "dict", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}, {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) for a person based on their weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "The weight of the person in kilograms."}, "height": {"type": "integer", "description": "The height of the person in centimeters."}, "system": {"type": "string", "description": "The system of units to be used, 'metric' or 'imperial'. Default is 'metric'."}}, "required": ["weight", "height"]}}]}, "model_result_raw": "[sentiment_analysis(text='I love the food here! It's always fresh and delicious.', language='English')]", "possible_answer": [{"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English"]}}]}