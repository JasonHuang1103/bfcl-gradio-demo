{"accuracy": 0.9225, "correct_count": 369, "total_count": 400}
{"id": "simple_5", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'root_type' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_5", "question": [[{"role": "user", "content": "Find all the roots of a quadratic equation given coefficients a = 3, b = -11, and c = -4."}]], "function": [{"name": "solve_quadratic", "description": "Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots.", "parameters": {"type": "dict", "properties": {"a": {"type": "integer", "description": "The coefficient of the squared term in the quadratic equation."}, "b": {"type": "integer", "description": "The coefficient of the linear term in the quadratic equation."}, "c": {"type": "integer", "description": "The constant term in the quadratic equation."}, "root_type": {"type": "string", "description": "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. Default value is 'real'."}}, "required": ["a", "b", "c"]}}]}, "model_result_raw": "[solve_quadratic(a=3, b=-11, c=-4)]", "model_result_decoded": [{"solve_quadratic": {"a": 3, "b": -11, "c": -4}}], "possible_answer": [{"solve_quadratic": {"a": [3], "b": [-11], "c": [-4], "root_type": ["all"]}}]}
{"id": "simple_13", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."], "error_type": "type_error:nested", "prompt": {"id": "simple_13", "question": [[{"role": "user", "content": "Calculate the area under the curve y=x^2 from x=1 to x=3."}]], "function": [{"name": "calculate_area_under_curve", "description": "Calculate the area under a mathematical function within a given interval.", "parameters": {"type": "dict", "properties": {"function": {"type": "string", "description": "The mathematical function as a string."}, "interval": {"type": "array", "items": {"type": "float"}, "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."}, "method": {"type": "string", "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, "required": ["function", "interval"]}}]}, "model_result_raw": "[calculate_area_under_curve(function='x**2', interval=[1, 3])]", "model_result_decoded": [{"calculate_area_under_curve": {"function": "x**2", "interval": [1, 3]}}], "possible_answer": [{"calculate_area_under_curve": {"function": ["x**2", "lambda x: x**2", "y=x**2"], "interval": [[1.0, 3.0]], "method": ["", "trapezoidal"]}}]}
{"id": "simple_72", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'trait_values'. Expected type array, got dict. Parameter value: {'trait_A': 0.8, 'trait_B': 0.7}."], "error_type": "type_error:simple", "prompt": {"id": "simple_72", "question": [[{"role": "user", "content": "Calculate the expected evolutionary fitness of a creature, with trait A contributing to 40% of the fitness and trait B contributing 60%, if trait A has a value of 0.8 and trait B a value of 0.7."}]], "function": [{"name": "calculate_fitness", "description": "Calculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits.", "parameters": {"type": "dict", "properties": {"trait_values": {"type": "array", "items": {"type": "float"}, "description": "List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness."}, "trait_contributions": {"type": "array", "items": {"type": "float"}, "description": "List of the percentage contributions of each trait to the overall fitness, which must sum to 1."}}, "required": ["trait_values", "trait_contributions"]}}]}, "model_result_raw": "[calculate_fitness(trait_values={'trait_A': 0.8, 'trait_B': 0.7}, trait_contributions={'trait_A': 0.4, 'trait_B': 0.6})]", "model_result_decoded": [{"calculate_fitness": {"trait_values": {"trait_A": 0.8, "trait_B": 0.7}, "trait_contributions": {"trait_A": 0.4, "trait_B": 0.6}}}], "possible_answer": [{"calculate_fitness": {"trait_values": [[0.8, 0.7]], "trait_contributions": [[0.4, 0.6]]}}]}
{"id": "simple_82", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."], "error_type": "type_error:nested", "prompt": {"id": "simple_82", "question": [[{"role": "user", "content": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30]."}]], "function": [{"name": "calculate_average", "description": "Calculates the average of a list of numbers.", "parameters": {"type": "dict", "properties": {"numbers": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to calculate the average of."}}, "required": ["numbers"]}}]}, "model_result_raw": "[calculate_average(numbers=[12, 15, 18, 20, 21, 26, 30])]", "model_result_decoded": [{"calculate_average": {"numbers": [12, 15, 18, 20, 21, 26, 30]}}], "possible_answer": [{"calculate_average": {"numbers": [[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0]]}}]}
{"id": "simple_87", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."], "error_type": "type_error:nested", "prompt": {"id": "simple_87", "question": [[{"role": "user", "content": "Sort the list [5, 3, 4, 1, 2] in ascending order."}]], "function": [{"name": "array_sort", "description": "Sorts a given list in ascending or descending order.", "parameters": {"type": "dict", "properties": {"list": {"type": "array", "items": {"type": "float"}, "description": "The list of numbers to be sorted."}, "order": {"type": "string", "enum": ["ascending", "descending"], "description": "Order of sorting."}}, "required": ["list", "order"]}}]}, "model_result_raw": "[array_sort(list=[5, 3, 4, 1, 2], order='ascending')]", "model_result_decoded": [{"array_sort": {"list": [5, 3, 4, 1, 2], "order": "ascending"}}], "possible_answer": [{"array_sort": {"list": [[5.0, 3.0, 4.0, 1.0, 2.0]], "order": ["ascending"]}}]}
{"id": "simple_91", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'condition': 'operating days=Sunday'. Expected one of ['open on Sundays', 'opens on Sundays']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_91", "question": [[{"role": "user", "content": "Get the highest rated sushi restaurant in Boston, that opens on Sundays."}]], "function": [{"name": "get_restaurant", "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "Cuisine of the restaurant."}, "location": {"type": "string", "description": "City where restaurant is located."}, "condition": {"type": "string", "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"}}, "required": ["cuisine", "location", "condition"]}}]}, "model_result_raw": "[get_restaurant(cuisine='sushi', location='Boston', condition='operating days=Sunday')]", "model_result_decoded": [{"get_restaurant": {"cuisine": "sushi", "location": "Boston", "condition": "operating days=Sunday"}}], "possible_answer": [{"get_restaurant": {"cuisine": ["sushi"], "location": ["Boston"], "condition": ["open on Sundays", "opens on Sundays"]}}]}
{"id": "simple_99", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'end_range': 2.0. Expected one of [6.2832]."], "error_type": "value_error:others", "prompt": {"id": "simple_99", "question": [[{"role": "user", "content": "Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz."}]], "function": [{"name": "plot_sine_wave", "description": "Plot a sine wave for a given frequency in a given range.", "parameters": {"type": "dict", "properties": {"start_range": {"type": "float", "description": "Start of the range in radians. Four decimal places."}, "end_range": {"type": "float", "description": "End of the range in radians. Four decimal places."}, "frequency": {"type": "integer", "description": "Frequency of the sine wave in Hz."}, "amplitude": {"type": "integer", "description": "Amplitude of the sine wave. Default is 1."}, "phase_shift": {"type": "integer", "description": "Phase shift of the sine wave in radians. Default is 0."}}, "required": ["start_range", "end_range", "frequency"]}}]}, "model_result_raw": "[plot_sine_wave(start_range=0, end_range=2, frequency=5)]", "model_result_decoded": [{"plot_sine_wave": {"start_range": 0, "end_range": 2, "frequency": 5}}], "possible_answer": [{"plot_sine_wave": {"start_range": [0.0], "end_range": [6.2832], "frequency": [5], "amplitude": [1, ""], "phase_shift": [0, ""]}}]}
{"id": "simple_136", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'annual_rate': 0.05. Expected one of [5.0]."], "error_type": "value_error:others", "prompt": {"id": "simple_136", "question": [[{"role": "user", "content": "Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years."}]], "function": [{"name": "compound_interest", "description": "Calculate compound interest for a certain time period.", "parameters": {"type": "dict", "properties": {"principal": {"type": "integer", "description": "The initial amount of money that was invested or loaned out."}, "annual_rate": {"type": "float", "description": "The interest rate for a year as a percentage."}, "compounding_freq": {"type": "string", "enum": ["monthly", "quarterly", "annually"], "description": "The number of times that interest is compounded per unit period."}, "time_in_years": {"type": "integer", "description": "The time the money is invested for in years."}}, "required": ["principal", "annual_rate", "compounding_freq", "time_in_years"]}}]}, "model_result_raw": "[compound_interest(principal=10000, annual_rate=0.05, compounding_freq='monthly', time_in_years=5)]", "model_result_decoded": [{"compound_interest": {"principal": 10000, "annual_rate": 0.05, "compounding_freq": "monthly", "time_in_years": 5}}], "possible_answer": [{"compound_interest": {"principal": [10000], "annual_rate": [5.0], "compounding_freq": ["monthly"], "time_in_years": [5]}}]}
{"id": "simple_139", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'yearly_yield': 0.05. Expected one of [5.0]."], "error_type": "value_error:others", "prompt": {"id": "simple_139", "question": [[{"role": "user", "content": "What is the estimated return on a mutual fund, given that it has a yearly yield of 5%, an investment amount of $2000 and a time period of 3 years?"}]], "function": [{"name": "estimate_mutual_fund_return", "description": "Calculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period.", "parameters": {"type": "dict", "properties": {"yearly_yield": {"type": "float", "description": "The yearly yield of the mutual fund as a percentage."}, "investment_amount": {"type": "integer", "description": "The initial investment amount in the mutual fund."}, "years": {"type": "integer", "description": "The time period for which the investment is made in years."}}, "required": ["yearly_yield", "investment_amount", "years"]}}]}, "model_result_raw": "[estimate_mutual_fund_return(yearly_yield=0.05, investment_amount=2000, years=3)]", "model_result_decoded": [{"estimate_mutual_fund_return": {"yearly_yield": 0.05, "investment_amount": 2000, "years": 3}}], "possible_answer": [{"estimate_mutual_fund_return": {"yearly_yield": [5.0], "investment_amount": [2000], "years": [3]}}]}
{"id": "simple_151", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'top_n' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_151", "question": [[{"role": "user", "content": "Find the highest grossing bank in the U.S for year 2020."}]], "function": [{"name": "highest_grossing_banks", "description": "Retrieve the highest grossing banks in a specified country and year.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country to get the data from."}, "year": {"type": "integer", "description": "The year to get the data from."}, "top_n": {"type": "integer", "description": "Top n banks in terms of grossing. Default is 5"}}, "required": ["country", "year"]}}]}, "model_result_raw": "[highest_grossing_banks(country='U.S', year=2020)]", "model_result_decoded": [{"highest_grossing_banks": {"country": "U.S", "year": 2020}}], "possible_answer": [{"highest_grossing_banks": {"country": ["U.S", "United States", "USA", "U.S."], "year": [2020], "top_n": [1]}}]}
{"id": "simple_156", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'details' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_156", "question": [[{"role": "user", "content": "Look up details of a felony crime record for case number CA123456 in San Diego County"}]], "function": [{"name": "crime_record.get_record", "description": "Retrieve detailed felony crime records using a specific case number and location.", "parameters": {"type": "dict", "properties": {"case_number": {"type": "string", "description": "The case number related to the crime."}, "county": {"type": "string", "description": "The county in which the crime occurred."}, "details": {"type": "boolean", "description": "To get a detailed report, set as true. Defaults to false."}}, "required": ["case_number", "county"]}}]}, "model_result_raw": "[crime_record.get_record(case_number='CA123456', county='San Diego')]", "model_result_decoded": [{"crime_record.get_record": {"case_number": "CA123456", "county": "San Diego"}}], "possible_answer": [{"crime_record.get_record": {"case_number": ["CA123456"], "county": ["San Diego", "San Diego County"], "details": [true]}}]}
{"id": "simple_166", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'city': 'Chicago'. Expected one of ['Chicago, IL.', 'Chicago, IL']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_166", "question": [[{"role": "user", "content": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago."}]], "function": [{"name": "lawyer.find_nearby", "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.", "parameters": {"type": "dict", "properties": {"city": {"type": "string", "description": "The city and state, e.g. Chicago, IL."}, "specialty": {"type": "array", "items": {"type": "string", "enum": ["Civil", "Divorce", "Immigration", "Business", "Criminal"]}, "description": "Specialization of the lawyer."}, "fee": {"type": "integer", "description": "Hourly fee charged by lawyer"}}, "required": ["city", "specialty", "fee"]}}]}, "model_result_raw": "[lawyer.find_nearby(city='Chicago', specialty=['Divorce'], fee=400)]", "model_result_decoded": [{"lawyer.find_nearby": {"city": "Chicago", "specialty": ["Divorce"], "fee": 400}}], "possible_answer": [{"lawyer.find_nearby": {"city": ["Chicago, IL.", "Chicago, IL"], "specialty": [["Divorce"]], "fee": [400]}}]}
{"id": "simple_173", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'judicial_system' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_173", "question": [[{"role": "user", "content": "Find state law cases related to land disputes in the past 5 years from 2015 to 2021 in New York."}]], "function": [{"name": "law_case_search", "description": "Search and retrieve law cases based on the topic, timeline, and location.", "parameters": {"type": "dict", "properties": {"topic": {"type": "string", "description": "The subject matter of the case."}, "year_range": {"type": "array", "items": {"type": "integer"}, "description": "The start and end year for searching cases."}, "location": {"type": "string", "description": "The location where the case is being heard."}, "judicial_system": {"type": "string", "description": "The specific judicial system in which to search (e.g. 'federal', 'state').", "default": "all"}}, "required": ["topic", "year_range", "location"]}}]}, "model_result_raw": "[law_case_search(topic='land disputes', year_range=[2015, 2021], location='New York')]", "model_result_decoded": [{"law_case_search": {"topic": "land disputes", "year_range": [2015, 2021], "location": "New York"}}], "possible_answer": [{"law_case_search": {"topic": ["land disputes"], "year_range": [[2015, 2021]], "location": ["New York"], "judicial_system": ["state"]}}]}
{"id": "simple_196", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'date': '2022-08-16'. Expected one of ['08-16-2022']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_196", "question": [[{"role": "user", "content": "What is the air quality index in London 2022/08/16?"}]], "function": [{"name": "air_quality", "description": "Retrieve the air quality index for a specific location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city that you want to get the air quality index for."}, "date": {"type": "string", "description": "The date (month-day-year) you want to get the air quality index for."}}, "required": ["location", "date"]}}]}, "model_result_raw": "[air_quality(location='London', date='2022-08-16')]", "model_result_decoded": [{"air_quality": {"location": "London", "date": "2022-08-16"}}], "possible_answer": [{"air_quality": {"location": ["London"], "date": ["08-16-2022"]}}]}
{"id": "simple_215", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'extra_info': True. Expected one of ['', False]."], "error_type": "value_error:others", "prompt": {"id": "simple_215", "question": [[{"role": "user", "content": "Give me a brief on movie 'Interstellar'"}]], "function": [{"name": "movie_details.brief", "description": "This function retrieves a brief about a specified movie.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "Title of the movie"}, "extra_info": {"type": "boolean", "description": "Option to get additional information like Director, Cast, Awards etc.", "default": "false"}}, "required": ["title"]}}]}, "model_result_raw": "[movie_details.brief(title='Interstellar', extra_info=True)]", "model_result_decoded": [{"movie_details.brief": {"title": "Interstellar", "extra_info": true}}], "possible_answer": [{"movie_details.brief": {"title": ["Interstellar"], "extra_info": ["", false]}}]}
{"id": "simple_218", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Incorrect type for parameter 'patient_id'. Expected type string, got int. Parameter value: 546382."], "error_type": "type_error:simple", "prompt": {"id": "simple_218", "question": [[{"role": "user", "content": "Given patient with id 546382, retrieve their brain MRI report with the status 'concluded'."}]], "function": [{"name": "patient.get_mri_report", "description": "Fetch the brain MRI report of the patient for a given status.", "parameters": {"type": "dict", "properties": {"patient_id": {"type": "string", "description": "The patient identifier."}, "mri_type": {"type": "string", "description": "Type of the MRI. Default to be 'brain'.", "enum": ["brain", "spinal", "chest", "abdominal"]}, "status": {"type": "string", "description": "Status of the report, could be 'in progress', 'concluded' or 'draft'.", "enum": ["in progress", "concluded", "draft"]}}, "required": ["patient_id", "status"]}}]}, "model_result_raw": "[patient.get_mri_report(patient_id=546382, mri_type='brain', status='concluded')]", "model_result_decoded": [{"patient.get_mri_report": {"patient_id": 546382, "mri_type": "brain", "status": "concluded"}}], "possible_answer": [{"patient.get_mri_report": {"patient_id": ["546382"], "mri_type": ["brain", ""], "status": ["concluded"]}}]}
{"id": "simple_233", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Optional parameter 'format' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "simple_233", "question": [[{"role": "user", "content": "When did the Treaty of Tordesillas take place? Put it in the format of YYYY."}]], "function": [{"name": "european_history.get_event_date", "description": "Retrieve the date of a specific event in European history.", "parameters": {"type": "dict", "properties": {"event_name": {"type": "string", "description": "The name of the event."}, "format": {"type": "string", "description": "Optional format of the returned date. Default is 'MM-DD-YYYY'."}}, "required": ["event_name"]}}]}, "model_result_raw": "[european_history.get_event_date(event_name='Treaty of Tordesillas')]", "model_result_decoded": [{"european_history.get_event_date": {"event_name": "Treaty of Tordesillas"}}], "possible_answer": [{"european_history.get_event_date": {"event_name": ["Treaty of Tordesillas"], "format": ["YYYY"]}}]}
{"id": "simple_241", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'event': 'American Civil War'. Expected one of ['Civil War']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_241", "question": [[{"role": "user", "content": "Who was the U.S. president during the Civil War?"}]], "function": [{"name": "US_President_During_Event", "description": "Returns the U.S. president during a specified historical event.", "parameters": {"type": "dict", "properties": {"event": {"type": "string", "description": "The historical event."}, "country": {"type": "string", "description": "The country the president leads (optional parameter, defaults to 'USA' if not specified)."}}, "required": ["event"]}}]}, "model_result_raw": "[US_President_During_Event(event='American Civil War')]", "model_result_decoded": [{"US_President_During_Event": {"event": "American Civil War"}}], "possible_answer": [{"US_President_During_Event": {"event": ["Civil War"], "country": ["USA", ""]}}]}
{"id": "simple_248", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'want_year'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_248", "question": [[{"role": "user", "content": "Who invented the theory of relativity and in which year?"}]], "function": [{"name": "science_history.get_invention", "description": "Retrieve the inventor and year of invention based on the invention's name.", "parameters": {"type": "dict", "properties": {"invention_name": {"type": "string", "description": "The name of the invention."}, "want_year": {"type": "boolean", "default": false, "description": "Return the year of invention if set to true."}}, "required": ["invention_name", "want_year"]}}]}, "model_result_raw": "[science_history.get_invention(invention_name='theory of relativity')]", "model_result_decoded": [{"science_history.get_invention": {"invention_name": "theory of relativity"}}], "possible_answer": [{"science_history.get_invention": {"invention_name": ["theory of relativity", "Theory of Relativity"], "want_year": [true]}}]}
{"id": "simple_249", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'include_people': True. Expected one of [False, '']."], "error_type": "value_error:others", "prompt": {"id": "simple_249", "question": [[{"role": "user", "content": "Tell me more about Christianity and its history till the 14th century"}]], "function": [{"name": "religion.history_info", "description": "Provides comprehensive historical details about a specified religion till a specified century.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "The name of the religion for which historical details are needed."}, "till_century": {"type": "integer", "description": "The century till which historical details are needed."}, "include_people": {"type": "boolean", "description": "To include influential people related to the religion during that time period, default is False"}}, "required": ["religion", "till_century"]}}]}, "model_result_raw": "[religion.history_info(religion='Christianity', till_century=14, include_people=True)]", "model_result_decoded": [{"religion.history_info": {"religion": "Christianity", "till_century": 14, "include_people": true}}], "possible_answer": [{"religion.history_info": {"religion": ["Christianity"], "till_century": [14], "include_people": [false, ""]}}]}
{"id": "simple_266", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'artist': 'Auguste Rodin'. Expected one of ['Rodin']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_266", "question": [[{"role": "user", "content": "What is the value of the sculpture 'The Thinker' by Rodin?"}]], "function": [{"name": "get_sculpture_value", "description": "Retrieve the current market value of a particular sculpture by a specific artist.", "parameters": {"type": "dict", "properties": {"sculpture": {"type": "string", "description": "The name of the sculpture."}, "artist": {"type": "string", "description": "The name of the artist who created the sculpture."}}, "required": ["sculpture", "artist"]}}]}, "model_result_raw": "[get_sculpture_value(sculpture='The Thinker', artist='Auguste Rodin')]", "model_result_decoded": [{"get_sculpture_value": {"sculpture": "The Thinker", "artist": "Auguste Rodin"}}], "possible_answer": [{"get_sculpture_value": {"sculpture": ["The Thinker"], "artist": ["Rodin"]}}]}
{"id": "simple_267", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['New York City, NY']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_267", "question": [[{"role": "user", "content": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month."}]], "function": [{"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city and state where the exhibition is held, e.g., New York City, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events if not specified."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'low'"}}, "required": ["location", "art_form"]}}]}, "model_result_raw": "[find_exhibition(location='New York', art_form='sculpture', month='upcoming', user_ratings='high')]", "model_result_decoded": [{"find_exhibition": {"location": "New York", "art_form": "sculpture", "month": "upcoming", "user_ratings": "high"}}], "possible_answer": [{"find_exhibition": {"location": ["New York City, NY"], "art_form": ["sculpture", "modern sculpture"], "month": [""], "user_ratings": ["high"]}}]}
{"id": "simple_337", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. closing parenthesis ')' does not match opening parenthesis '{' (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_337", "question": [[{"role": "user", "content": "In a texas holdem game, Who won in the poker game with players Alex, Sam, Robert and Steve given the cards Alex':['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']?"}]], "function": [{"name": "poker_game_winner", "description": "Identify the winner in a poker game based on the cards.", "parameters": {"type": "dict", "properties": {"players": {"type": "array", "items": {"type": "string"}, "description": "Names of the players in a list."}, "cards": {"type": "dict", "description": "An object containing the player name as key and the cards as values in a list."}, "type": {"type": "string", "description": "Type of poker game. Defaults to 'Texas Holdem'"}}, "required": ["players", "cards"]}}]}, "model_result_raw": "[poker_game_winner(players={'players': ['Alex', 'Sam', 'Robert', 'Steve'], cards={'Alex': ['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']}, type='Texas Holdem')]", "possible_answer": [{"poker_game_winner": {"players": [["Alex", "Sam", "Robert", "Steve"]], "cards": [{"Alex": [["A of spades", "K of spades"]], "Sam": [["2 of diamonds", "3 of clubs"]], "Robert": [["Q of hearts", "10 of hearts"]], "Steve": [["4 of spades", "5 of spades"]]}], "type": ["Texas Holdem", ""]}}]}
{"id": "simple_352", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'platform'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_352", "question": [[{"role": "user", "content": "Get the average user score for the game 'The Legend of Zelda: Breath of the Wild' from GameSpot."}]], "function": [{"name": "gamespot.getAverageUserScore", "description": "Retrieve the average user score of a game from GameSpot.", "parameters": {"type": "dict", "properties": {"game_name": {"type": "string", "description": "The name of the game."}, "platform": {"type": "string", "description": "The platform the game was released on (e.g., Nintendo Switch, PS5, etc.)", "default": "all platforms"}}, "required": ["game_name", "platform"]}}]}, "model_result_raw": "[gamespot.getAverageUserScore(game_name='The Legend of Zelda: Breath of the Wild')]", "model_result_decoded": [{"gamespot.getAverageUserScore": {"game_name": "The Legend of Zelda: Breath of the Wild"}}], "possible_answer": [{"gamespot.getAverageUserScore": {"game_name": ["The Legend of Zelda: Breath of the Wild"], "platform": ["Nintendo Switch", "all platforms"]}}]}
{"id": "simple_355", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'recipe': 'Beef Lasagna Recipe'. Expected one of ['Beef Lasagna']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_355", "question": [[{"role": "user", "content": "How many calories in the Beef Lasagna Recipe from Foodnetwork.com?"}]], "function": [{"name": "recipe_info.get_calories", "description": "Retrieve the amount of calories from a specific recipe in a food website.", "parameters": {"type": "dict", "properties": {"website": {"type": "string", "description": "The food website that has the recipe."}, "recipe": {"type": "string", "description": "Name of the recipe."}, "optional_meal_time": {"type": "string", "description": "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner'). Default is all if not specified."}}, "required": ["website", "recipe"]}}]}, "model_result_raw": "[recipe_info.get_calories(website='Foodnetwork.com', recipe='Beef Lasagna Recipe')]", "model_result_decoded": [{"recipe_info.get_calories": {"website": "Foodnetwork.com", "recipe": "Beef Lasagna Recipe"}}], "possible_answer": [{"recipe_info.get_calories": {"website": ["Foodnetwork.com"], "recipe": ["Beef Lasagna"], "optional_meal_time": [""]}}]}
{"id": "simple_358", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Missing required parameter: 'dish'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "simple_358", "question": [[{"role": "user", "content": "Find a gluten-free cookie recipe that takes less than 30 minutes to prepare."}]], "function": [{"name": "recipe_search", "description": "Search for a cooking recipe based on specific dietary needs and time constraint.", "parameters": {"type": "dict", "properties": {"diet": {"type": "array", "items": {"type": "string", "enum": ["Gluten Free", "Dairy Free", "Vegan", "Vegetarian"]}, "description": "Specific dietary need."}, "time_limit": {"type": "integer", "description": "The maximum time to prepare the recipe in minutes. Default is 60 minutes."}, "dish": {"type": "string", "description": "The name of the dish to search for. Default is not use if not specified."}}, "required": ["dish", "diet"]}}]}, "model_result_raw": "[recipe_search(diet='Gluten Free', time_limit=30)]", "model_result_decoded": [{"recipe_search": {"diet": "Gluten Free", "time_limit": 30}}], "possible_answer": [{"recipe_search": {"diet": [["Gluten Free"], ["GF"], ["gluten free"]], "time_limit": [30], "dish": ["cookie"]}}]}
{"id": "simple_370", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'items': ['rice', 'rice', 'rice', 'rice', 'rice']. Expected one of [['olive oil', 'rice'], ['olive oil', 'bag of rice']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_370", "question": [[{"role": "user", "content": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto."}]], "function": [{"name": "safeway.order", "description": "Order specified items from a Safeway location.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The location of the Safeway store, e.g. Palo Alto, CA."}, "items": {"type": "array", "items": {"type": "string"}, "description": "List of items to order."}, "quantity": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item in the order list."}}, "required": ["location", "items", "quantity"]}}]}, "model_result_raw": "[safeway.order(location='Palo Alto, CA', items=['olive oil', 'olive oil', 'olive oil'], quantity=[1, 1, 1], items=['rice', 'rice', 'rice', 'rice', 'rice'])]", "model_result_decoded": [{"safeway.order": {"location": "Palo Alto, CA", "items": ["rice", "rice", "rice", "rice", "rice"], "quantity": [1, 1, 1]}}], "possible_answer": [{"safeway.order": {"location": ["Palo Alto", "Palo Alto, CA"], "items": [["olive oil", "rice"], ["olive oil", "bag of rice"]], "quantity": [[3, 1]]}}]}
{"id": "simple_373", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'product_list': ['apples', 'rice', '12 pack of bottled water']. Expected one of [['apples', 'rice', 'bottled water'], ['apples', 'rice', 'water']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "simple_373", "question": [[{"role": "user", "content": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability."}]], "function": [{"name": "walmart.purchase", "description": "Retrieve information of items from Walmart including stock availability.", "parameters": {"type": "dict", "properties": {"loc": {"type": "string", "description": "Location of the nearest Walmart."}, "product_list": {"type": "array", "items": {"type": "string"}, "description": "Items to be purchased listed in an array."}, "pack_size": {"type": "array", "items": {"type": "integer"}, "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."}}, "required": ["loc", "product_list"]}}]}, "model_result_raw": "[walmart.purchase(loc='San Jose', product_list=['apples', 'rice', '12 pack of bottled water'])]", "model_result_decoded": [{"walmart.purchase": {"loc": "San Jose", "product_list": ["apples", "rice", "12 pack of bottled water"]}}], "possible_answer": [{"walmart.purchase": {"loc": ["San Jose", "San Jose, CA"], "product_list": [["apples", "rice", "bottled water"], ["apples", "rice", "water"]], "pack_size": [[1, 1, 12]]}}]}
{"id": "simple_375", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. '[' was never closed (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "simple_375", "question": [[{"role": "user", "content": "Check the total price for three pumpkins and two dozen eggs at Walmart."}]], "function": [{"name": "walmart.check_price", "description": "Calculate total price for given items and their quantities at Walmart.", "parameters": {"type": "dict", "properties": {"items": {"type": "array", "items": {"type": "string"}, "description": "List of items to be priced."}, "quantities": {"type": "array", "items": {"type": "integer"}, "description": "Quantity of each item corresponding to the items list."}, "store_location": {"type": "string", "description": "The store location for specific pricing (optional). Default to all if not specified."}}, "required": ["items", "quantities"]}}]}, "model_result_raw": "[walmart.check_price(items=['pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', 'pumpkin', '", "possible_answer": [{"walmart.check_price": {"items": [["pumpkins", "eggs"], ["pumpkin", "dozen eggs"]], "quantities": [[3, 24], [3, 2]], "store_location": [""]}}]}
{"id": "simple_380", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'location': 'New York'. Expected one of ['Manhattan, New York', 'Manhattan, NY', 'NYC', 'New York City']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "simple_380", "question": [[{"role": "user", "content": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023."}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where you want to book the hotel."}, "room_type": {"type": "string", "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, "duration": {"type": "integer", "description": "The number of nights you want to book the hotel for."}, "start_date": {"type": "string", "description": "The date when your stay begins."}, "preferences": {"type": "array", "items": {"type": "string", "enum": ["pet_friendly", "gym", "swimming_pool", "free_breakfast", "parking"]}, "description": "Optional preferences of stay at the hotel. Default to use all if not specified."}}, "required": ["location", "room_type", "duration", "start_date"]}}]}, "model_result_raw": "[hotel_booking(location='New York', room_type='single', duration=3, start_date='2023-03-10', preferences=['pet_friendly'])]", "model_result_decoded": [{"hotel_booking": {"location": "New York", "room_type": "single", "duration": 3, "start_date": "2023-03-10", "preferences": ["pet_friendly"]}}], "possible_answer": [{"hotel_booking": {"location": ["Manhattan, New York", "Manhattan, NY", "NYC", "New York City"], "room_type": ["single"], "duration": [3], "start_date": ["2023-03-10", "03/10/2023", "Mar.10,2023", "March 10th, 2023", "March 10th,2023", "March10th, 2023", "March10th,2023"], "preferences": [["pet_friendly"]]}}]}
{"id": "simple_387", "model_name": "meta-llama_Llama-3.2-3B-Instruct", "test_category": "simple", "valid": false, "error": ["Invalid value for parameter 'rooms': 3. Expected one of [1, '']."], "error_type": "value_error:others", "prompt": {"id": "simple_387", "question": [[{"role": "user", "content": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022"}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}]}, "model_result_raw": "[hotel_booking(hotel_name='Plaza Hotel', location='New York, NY', start_date='2022-06-01', end_date='2022-06-04', rooms=3)]", "model_result_decoded": [{"hotel_booking": {"hotel_name": "Plaza Hotel", "location": "New York, NY", "start_date": "2022-06-01", "end_date": "2022-06-04", "rooms": 3}}], "possible_answer": [{"hotel_booking": {"hotel_name": ["Plaza Hotel"], "location": ["New York City, NY", "New York, NY"], "start_date": ["2022-06-01", "06/01/2022", "Jun.1,2022"], "end_date": ["2022-06-04", "06/04/2022", "Jun.4,2022"], "rooms": [1, ""]}}]}