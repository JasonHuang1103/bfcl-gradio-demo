{"accuracy": 0.905, "correct_count": 181, "total_count": 200}
{"id": "multiple_7", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_7", "question": [[{"role": "user", "content": "How to assess the population growth in deer and their impact on woodland in Washington state over the past decade?"}]], "function": [{"name": "wildlife_population.assess_growth", "description": "Assesses the population growth of a specific species in a specified location over a period.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species for which the growth is to be calculated."}, "location": {"type": "string", "description": "The area where the species is present."}, "duration": {"type": "integer", "description": "The time period for which the population growth should be calculated in years."}}, "required": ["species", "location", "duration"]}}, {"name": "ecological_impact.analyze", "description": "Analyzes the impact of a species on a particular ecosystem.", "parameters": {"type": "dict", "properties": {"species": {"type": "string", "description": "The species whose impact is to be calculated."}, "ecosystem": {"type": "string", "description": "The ecosystem being affected."}, "location": {"type": "string", "description": "The area where the impact is analyzed."}, "timeframe": {"type": "integer", "description": "The time period for which the impact analysis should be carried out in years.", "default": 5}}, "required": ["species", "ecosystem", "location"]}}]}, "model_result_raw": "[wildlife_population.assess_growth(species=\"deer\", location=\"Washington state\", duration=10), ecological_impact.analyze(species=\"deer\", ecosystem=\"woodland\", location=\"Washington state\")]", "model_result_decoded": [{"wildlife_population.assess_growth": {"species": "deer", "location": "Washington state", "duration": 10}}, {"ecological_impact.analyze": {"species": "deer", "ecosystem": "woodland", "location": "Washington state"}}], "possible_answer": [{"wildlife_population.assess_growth": {"species": ["deer", "Deer"], "location": ["Washington state", "WA", "Washington"], "duration": [10]}}]}
{"id": "multiple_24", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_24", "question": [[{"role": "user", "content": "What is the fastest route from London to Edinburgh for playing a chess championship? Also provide an estimate of the distance."}]], "function": [{"name": "route_planner.calculate_route", "description": "Determines the best route between two points.", "parameters": {"type": "dict", "properties": {"start": {"type": "string", "description": "The starting point of the journey."}, "destination": {"type": "string", "description": "The destination of the journey."}, "method": {"type": "string", "enum": ["fastest", "shortest", "balanced"], "description": "The method to use when calculating the route (default is 'fastest').", "default": "fastest"}}, "required": ["start", "destination"]}}, {"name": "chess_club_details.find", "description": "Provides details about a chess club, including location.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the chess club."}, "city": {"type": "string", "description": "The city in which the chess club is located."}, "event": {"type": "string", "description": "The event hosted by the club.", "default": "null"}}, "required": ["name", "city"]}}]}, "model_result_raw": "[route_planner.calculate_route(start=\"London\", destination=\"Edinburgh\", method=\"fastest\"), route_planner.calculate_route(start=\"London\", destination=\"Edinburgh\", method=\"distance\")]", "model_result_decoded": [{"route_planner.calculate_route": {"start": "London", "destination": "Edinburgh", "method": "fastest"}}, {"route_planner.calculate_route": {"start": "London", "destination": "Edinburgh", "method": "distance"}}], "possible_answer": [{"route_planner.calculate_route": {"start": ["London"], "destination": ["Edinburgh"], "method": ["fastest", ""]}}]}
{"id": "multiple_33", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Missing required parameter: 'a'."], "error_type": "simple_function_checker:missing_required", "prompt": {"id": "multiple_33", "question": [[{"role": "user", "content": "Find the integral of the function f(x) = 3x^2 from 1 to 2."}]], "function": [{"name": "calculate_derivative", "description": "Calculate the derivative of a single-variable function.", "parameters": {"type": "dict", "properties": {"func": {"type": "string", "description": "The function to be differentiated."}, "x_value": {"type": "integer", "description": "The x-value at which the derivative should be calculated."}, "order": {"type": "integer", "description": "The order of the derivative (optional). Default is 1st order.", "default": 1}}, "required": ["func", "x_value"]}}, {"name": "calculate_integral", "description": "Calculate the definite integral of a single-variable function.", "parameters": {"type": "dict", "properties": {"func": {"type": "string", "description": "The function to be integrated."}, "a": {"type": "integer", "description": "The lower bound of the integration."}, "b": {"type": "integer", "description": "The upper bound of the integration."}}, "required": ["func", "a", "b"]}}]}, "model_result_raw": "[calculate_integral(func=\"func=3*x**2, a=1, b=2\")]", "model_result_decoded": [{"calculate_integral": {"func": "func=3*x**2, a=1, b=2"}}], "possible_answer": [{"calculate_integral": {"func": ["3x**2", "lambda x: 3x**2"], "a": [1], "b": [2]}}]}
{"id": "multiple_51", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Optional parameter 'n_rolls' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "multiple_51", "question": [[{"role": "user", "content": "Calculate the probability of rolling a sum of 7 on a roll of two dice."}]], "function": [{"name": "dice_roll_probability", "description": "Calculate the probability of a specific sum appearing from rolling two dice.", "parameters": {"type": "dict", "properties": {"desired_sum": {"type": "integer", "description": "The sum for which to calculate the probability."}, "n_rolls": {"type": "integer", "description": "Number of dice to be rolled. Default is 1", "optional": true}, "sides_per_die": {"type": "integer", "description": "Number of sides on each die."}}, "required": ["desired_sum", "sides_per_die"]}}, {"name": "flip_coin_probability", "description": "Calculate the probability of a specific outcome appearing from flipping a coin.", "parameters": {"type": "dict", "properties": {"desired_outcome": {"type": "string", "description": "The outcome for which to calculate the probability."}, "n_flips": {"type": "integer", "description": "Number of coins to be flipped. Default 1", "optional": true}}, "required": ["desired_outcome"]}}, {"name": "shuffle_card_probability", "description": "Calculate the probability of a specific card appearing from a shuffled deck.", "parameters": {"type": "dict", "properties": {"desired_card": {"type": "string", "description": "The card for which to calculate the probability."}, "n_decks": {"type": "integer", "description": "Number of decks to shuffle. Default 1", "optional": true}}, "required": ["desired_card"]}}]}, "model_result_raw": "[dice_roll_probability(desired_sum=7, sides_per_die=6)]", "model_result_decoded": [{"dice_roll_probability": {"desired_sum": 7, "sides_per_die": 6}}], "possible_answer": [{"dice_roll_probability": {"desired_sum": [7], "sides_per_die": [6], "n_rolls": [2]}}]}
{"id": "multiple_53", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Function name 'linear_regression' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "multiple_53", "question": [[{"role": "user", "content": "Predict the house prices for next 5 years based on interest rates and unemployment rates."}]], "function": [{"name": "linear_regression", "description": "Applies linear regression to a given set of independent variables to make a prediction.", "parameters": {"type": "dict", "properties": {"independent_var": {"type": "array", "items": {"type": "string"}, "description": "The independent variables."}, "dependent_var": {"type": "string", "description": "The dependent variable."}, "forecast_period": {"type": "integer", "description": "The number of years to forecast the prices. Default 1", "optional": true}}, "required": ["independent_var", "dependent_var"]}}, {"name": "random_forest_regression", "description": "Applies Random Forest Regression to a given set of independent variables to make a prediction.", "parameters": {"type": "dict", "properties": {"independent_var": {"type": "array", "items": {"type": "string"}, "description": "The independent variables."}, "dependent_var": {"type": "string", "description": "The dependent variable."}, "n_estimators": {"type": "integer", "description": "The number of trees in the forest. Default 1", "optional": true}, "forecast_period": {"type": "integer", "description": "The number of years to forecast the prices. Default 1", "optional": true}}, "required": ["independent_var", "dependent_var"]}}]}, "model_result_raw": "[random_forest_regression(independent_var=['interest_rates', 'unemployment_rates'], dependent_var='house_prices', forecast_period=5)]", "model_result_decoded": [{"random_forest_regression": {"independent_var": ["interest_rates", "unemployment_rates"], "dependent_var": "house_prices", "forecast_period": 5}}], "possible_answer": [{"linear_regression": {"independent_var": [["interest rates", "unemployment rates"], ["interest_rate", "unemployment_rate"], ["interest rate", "unemployment rate"]], "dependent_var": ["house_price", "house price"], "forecast_period": [5]}}]}
{"id": "multiple_67", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_67", "question": [[{"role": "user", "content": "Translate Hello, how are you? from English to French."}]], "function": [{"name": "translate", "description": "Translate text from a specified source language to a specified target language.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text to be translated."}, "source_language": {"type": "string", "description": "The language the text is currently in."}, "target_language": {"type": "string", "description": "The language the text will be translated to."}}, "required": ["text", "source_language", "target_language"]}}, {"name": "sentiment_analysis", "description": "Analyze the sentiment of a specified text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text whose sentiment is to be analyzed."}}, "required": ["text"]}}, {"name": "word_count", "description": "Count the number of words in the given text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text that the number of words is to be calculated."}}, "required": ["text"]}}]}, "model_result_raw": "translate(text=\"Hello, how are you?\", source_language=\"English\", target_language=\"French)", "possible_answer": [{"translate": {"text": ["Hello, how are you?"], "source_language": ["English"], "target_language": ["French"]}}]}
{"id": "multiple_73", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Wrong number of functions."], "error_type": "multiple_function_checker:wrong_count", "prompt": {"id": "multiple_73", "question": [[{"role": "user", "content": "Who was the founder of Buddhism and where was it originated?"}]], "function": [{"name": "religion.get_core_beliefs", "description": "Retrieves the core beliefs and practices of a specified religion.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "Name of the religion for which to retrieve the core beliefs and practices."}}, "required": ["religion"]}}, {"name": "religion.get_origin", "description": "Retrieves the origin and founder information of a specified religion.", "parameters": {"type": "dict", "properties": {"religion": {"type": "string", "description": "Name of the religion for which to retrieve the founder and origin."}}, "required": ["religion"]}}]}, "model_result_raw": "[religion.get_origin(religion='Buddhism'), religion.get_core_beliefs(religion='Buddhism')]", "model_result_decoded": [{"religion.get_origin": {"religion": "Buddhism"}}, {"religion.get_core_beliefs": {"religion": "Buddhism"}}], "possible_answer": [{"religion.get_origin": {"religion": ["Buddhism"]}}]}
{"id": "multiple_74", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'artist': 'Vincent van Gogh'. Expected one of ['Van Gogh']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_74", "question": [[{"role": "user", "content": "Find the price of Van Gogh's painting 'Starry Night' on all auction platforms."}]], "function": [{"name": "art_auction.fetch_artwork_price", "description": "Fetch the price of a specific artwork on the auction platform.", "parameters": {"type": "dict", "properties": {"artwork_name": {"type": "string", "description": "The name of the artwork to be searched."}, "artist": {"type": "string", "description": "The artist's name to ensure the precise artwork is fetched."}, "platform": {"type": "string", "description": "The platform where the artwork's price should be fetched from.", "default": "all"}}, "required": ["artwork_name", "artist"]}}, {"name": "library.search_book", "description": "Search for a specific book in the library.", "parameters": {"type": "dict", "properties": {"title": {"type": "string", "description": "The title of the book to be searched."}, "author": {"type": "string", "description": "The author of the book to ensure the precise book is fetched."}, "platform": {"type": "string", "description": "The library where the book should be fetched from.", "default": "all"}}, "required": ["title", "author"]}}]}, "model_result_raw": "[art_auction.fetch_artwork_price(artwork_name='Starry Night', artist='Vincent van Gogh')]", "model_result_decoded": [{"art_auction.fetch_artwork_price": {"artwork_name": "Starry Night", "artist": "Vincent van Gogh"}}], "possible_answer": [{"art_auction.fetch_artwork_price": {"artwork_name": ["Starry Night"], "artist": ["Van Gogh"], "platform": ["all", ""]}}]}
{"id": "multiple_91", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'ingredientLimit': 5. Expected one of [4]."], "error_type": "value_error:others", "prompt": {"id": "multiple_91", "question": [[{"role": "user", "content": "Can I find a good cooking recipe for apple pie using less than 5 ingredients?"}]], "function": [{"name": "restaurant.find", "description": "Locate restaurants based on specific criteria such as cuisine and price range", "parameters": {"type": "dict", "properties": {"cuisine": {"type": "string", "description": "The type of cuisine preferred."}, "price": {"type": "array", "items": {"type": "string"}, "description": "Price range of the restaurant in format ['low', 'mid', 'high']. Default ['low', 'mid', 'high']"}}, "required": ["cuisine"]}}, {"name": "recipe.find", "description": "Locate cooking recipes based on specific criteria such as main ingredient and number of ingredients", "parameters": {"type": "dict", "properties": {"mainIngredient": {"type": "string", "description": "Main ingredient for the recipe."}, "ingredientLimit": {"type": "integer", "description": "Max number of ingredients the recipe should use."}}, "required": ["mainIngredient", "ingredientLimit"]}}]}, "model_result_raw": "[recipe.find(mainIngredient=\"apple\", ingredientLimit=5)]", "model_result_decoded": [{"recipe.find": {"mainIngredient": "apple", "ingredientLimit": 5}}], "possible_answer": [{"recipe.find": {"mainIngredient": ["apple pie", "apple"], "ingredientLimit": [4]}}]}
{"id": "multiple_92", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'categories': ['vegetarian', 'gluten-free']. Expected one of [['vegan', 'gluten-free'], ['gluten-free', 'vegan']]."], "error_type": "value_error:list/tuple", "prompt": {"id": "multiple_92", "question": [[{"role": "user", "content": "Get me a list of available vegetarian and gluten-free foods at the Walmart near Denver."}]], "function": [{"name": "safeway.vegan_products", "description": "Get available vegan products at specified Safeway store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Safeway store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}, {"name": "wholefoods.vegan_products", "description": "Get available vegan products at specified Whole Foods store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Whole Foods store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}, {"name": "walmart.vegan_products", "description": "Get available vegan products at specified Walmart store", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "City and state where the Walmart store is located, e.g. Denver, CO"}, "categories": {"type": "array", "items": {"type": "string", "enum": ["vegan", "gluten-free"]}, "description": "Product categories to search within. Default empty array"}}, "required": ["location"]}}]}, "model_result_raw": "[walmart.vegan_products(location=\"Denver, CO\", categories=['vegetarian', 'gluten-free'])]", "model_result_decoded": [{"walmart.vegan_products": {"location": "Denver, CO", "categories": ["vegetarian", "gluten-free"]}}], "possible_answer": [{"walmart.vegan_products": {"location": ["Denver, CO", "Denver"], "categories": [["vegan", "gluten-free"], ["gluten-free", "vegan"]]}}]}
{"id": "multiple_100", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. 'Dict' object has no attribute 'elts'"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_100", "question": [[{"role": "user", "content": "Find the highest common factor of 36 and 24."}]], "function": [{"name": "music_generator.generate_scale_progression", "description": "Generate a music scale progression in a specific key with a given tempo and duration.", "parameters": {"type": "dict", "properties": {"key": {"type": "string", "description": "The key in which to generate the scale progression."}, "tempo": {"type": "integer", "description": "The tempo of the scale progression in BPM."}, "duration": {"type": "integer", "description": "The duration of each note in beats."}, "scale_type": {"type": "string", "default": "major", "description": "The type of scale to generate. Defaults to 'major'."}}, "required": ["key", "tempo", "duration"]}}, {"name": "math.hcf", "description": "Calculate the highest common factor of two numbers.", "parameters": {"type": "dict", "properties": {"number1": {"type": "integer", "description": "First number."}, "number2": {"type": "integer", "description": "Second number."}}, "required": ["number1", "number2"]}}]}, "model_result_raw": "[{'name': 'math.hcf', 'parameters': {'number1': 36, 'number2': 24}}]", "possible_answer": [{"math.hcf": {"number1": [36], "number2": [24]}}]}
{"id": "multiple_109", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'include_description': True. Expected one of [False, '']."], "error_type": "value_error:others", "prompt": {"id": "multiple_109", "question": [[{"role": "user", "content": "What are the names of proteins found in the plasma membrane?"}]], "function": [{"name": "find_exhibition", "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city where the exhibition is held, e.g., New York, NY."}, "art_form": {"type": "string", "description": "The form of art the exhibition is displaying e.g., sculpture."}, "month": {"type": "string", "description": "The month of exhibition. Default value will return upcoming events."}, "user_ratings": {"type": "string", "enum": ["low", "average", "high"], "description": "Select exhibitions with user rating threshold. Default is 'high'"}}, "required": ["location", "art_form"]}}, {"name": "mutation_type.find", "description": "Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID.", "parameters": {"type": "dict", "properties": {"snp_id": {"type": "string", "description": "The ID of the Single Nucleotide Polymorphism (SNP) mutation."}, "species": {"type": "string", "description": "Species in which the SNP occurs, default is 'Homo sapiens' (Humans)."}}, "required": ["snp_id"]}}, {"name": "cellbio.get_proteins", "description": "Get the list of proteins in a specific cell compartment.", "parameters": {"type": "dict", "properties": {"cell_compartment": {"type": "string", "description": "The specific cell compartment."}, "include_description": {"type": "boolean", "description": "Set true if you want a brief description of each protein.", "default": "false"}}, "required": ["cell_compartment"]}}]}, "model_result_raw": "[cellbio.get_proteins(cell_compartment=\"plasma membrane\", include_description=True)]", "model_result_decoded": [{"cellbio.get_proteins": {"cell_compartment": "plasma membrane", "include_description": true}}], "possible_answer": [{"cellbio.get_proteins": {"cell_compartment": ["plasma membrane"], "include_description": [false, ""]}}]}
{"id": "multiple_119", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'operation': '=='. Expected one of ['=']."], "error_type": "value_error:dict_value", "prompt": {"id": "multiple_119", "question": [[{"role": "user", "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."}]], "function": [{"name": "average_batting_score", "description": "Get the average batting score of a cricketer for specified past matches.", "parameters": {"type": "dict", "properties": {"player_name": {"type": "string", "description": "Name of the cricket player."}, "matches": {"type": "integer", "description": "Number of past matches to consider for average calculation."}, "match_format": {"type": "string", "description": "Format of the cricket matches considered (e.g., 'T20', 'ODI', 'Test'). Default is 'T20'."}}, "required": ["player_name", "matches"]}}, {"name": "calculate_return_on_investment", "description": "Calculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received.", "parameters": {"type": "dict", "properties": {"purchase_price": {"type": "float", "description": "The price the stock was bought at."}, "sale_price": {"type": "float", "description": "The price the stock was sold at."}, "dividend": {"type": "float", "description": "Any dividends received from the stock.", "default": 0}}, "required": ["purchase_price", "sale_price"]}}, {"name": "database.query", "description": "Query the database based on certain conditions.", "parameters": {"type": "dict", "properties": {"table": {"type": "string", "description": "Name of the table to query."}, "conditions": {"type": "array", "items": {"type": "dict", "properties": {"field": {"type": "string", "description": "The field to apply the condition."}, "operation": {"type": "string", "description": "The operation to be performed.", "enum": ["<", ">", "=", ">=", "<="]}, "value": {"type": "string", "description": "The value to be compared."}}, "required": ["field", "operation", "value"]}, "description": "Conditions for the query."}}, "required": ["table", "conditions"]}}, {"name": "probability_of_event", "description": "Calculates the probability of an event.", "parameters": {"type": "dict", "properties": {"success_outcomes": {"type": "integer", "description": "The number of successful outcomes."}, "total_outcomes": {"type": "integer", "description": "The total number of possible outcomes."}, "format_as_ratio": {"type": "boolean", "description": "When true, formats the output as a ratio instead of a decimal. Default is false."}}, "required": ["success_outcomes", "total_outcomes"]}}]}, "model_result_raw": "[database.query(table=\"user\", conditions=[{\"field\": \"age\", \"operation\": \">\", \"value\": \"25\"}, {\"field\": \"job\", \"operation\": \"==\", \"value\": \"engineer\"}])]", "model_result_decoded": [{"database.query": {"table": "user", "conditions": [{"field": "age", "operation": ">", "value": "25"}, {"field": "job", "operation": "==", "value": "engineer"}]}}], "possible_answer": [{"database.query": {"table": ["user"], "conditions": [[{"field": ["age"], "operation": [">"], "value": ["25"]}, {"field": ["job"], "operation": ["="], "value": ["engineer"]}]]}}]}
{"id": "multiple_149", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid syntax. Failed to decode AST. unterminated string literal (detected at line 1) (<unknown>, line 1)"], "error_type": "ast_decoder:decoder_failed", "prompt": {"id": "multiple_149", "question": [[{"role": "user", "content": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'."}]], "function": [{"name": "hotel_booking", "description": "Books a hotel room for a specific date range.", "parameters": {"type": "dict", "properties": {"hotel_name": {"type": "string", "description": "The name of the hotel."}, "location": {"type": "string", "description": "The city and state, e.g. New York, NY."}, "start_date": {"type": "string", "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."}, "end_date": {"type": "string", "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."}, "rooms": {"type": "integer", "default": 1, "description": "The number of rooms to reserve."}}, "required": ["hotel_name", "location", "start_date", "end_date"]}}, {"name": "sentiment_analysis", "description": "Perform sentiment analysis on a given piece of text.", "parameters": {"type": "dict", "properties": {"text": {"type": "string", "description": "The text on which to perform sentiment analysis."}, "language": {"type": "string", "description": "The language in which the text is written."}}, "required": ["text", "language"]}}, {"name": "get_time_difference", "description": "Get the time difference between two places.", "parameters": {"type": "dict", "properties": {"place1": {"type": "string", "description": "The first place for time difference."}, "place2": {"type": "string", "description": "The second place for time difference."}}, "required": ["place1", "place2"]}}, {"name": "calculate_bmi", "description": "Calculate the Body Mass Index (BMI) for a person based on their weight and height.", "parameters": {"type": "dict", "properties": {"weight": {"type": "integer", "description": "The weight of the person in kilograms."}, "height": {"type": "integer", "description": "The height of the person in centimeters."}, "system": {"type": "string", "description": "The system of units to be used, 'metric' or 'imperial'. Default is 'metric'."}}, "required": ["weight", "height"]}}]}, "model_result_raw": "[sentiment_analysis(text='I love the food here! It's always fresh and delicious.', language='en')]", "possible_answer": [{"sentiment_analysis": {"text": ["I love the food here! It's always fresh and delicious."], "language": ["english", "English"]}}]}
{"id": "multiple_156", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'category': 'Physics'. Expected one of ['', 'all']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_156", "question": [[{"role": "user", "content": "What was Albert Einstein's contribution to science on March 17, 1915?"}]], "function": [{"name": "historical_contrib.get_contrib", "description": "Retrieve historical contribution made by a scientist on a specific date.", "parameters": {"type": "dict", "properties": {"scientist": {"type": "string", "description": "The scientist whose contributions need to be searched."}, "date": {"type": "string", "description": "The date when the contribution was made in yyyy-mm-dd format."}, "category": {"type": "string", "description": "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is all fields."}}, "required": ["scientist", "date"]}}, {"name": "music.calculate_note_duration", "description": "Calculate the duration between two notes based on their frequencies and harmonic rhythm.", "parameters": {"type": "dict", "properties": {"first_note_frequency": {"type": "float", "description": "The frequency of the first note in Hz."}, "second_note_frequency": {"type": "float", "description": "The frequency of the second note in Hz."}, "tempo": {"type": "integer", "description": "The tempo of the music in beats per minute. Defaults to 120 beats per minute."}}, "required": ["first_note_frequency", "second_note_frequency"]}}, {"name": "math.gcd", "description": "Calculate the greatest common divisor of two integers.", "parameters": {"type": "dict", "properties": {"num1": {"type": "integer", "description": "First number."}, "num2": {"type": "integer", "description": "Second number."}}, "required": ["num1", "num2"]}}]}, "model_result_raw": "[historical_contrib.get_contrib(scientist=\"Albert Einstein\", date=\"1915-03-17\", category=\"Physics\")]", "model_result_decoded": [{"historical_contrib.get_contrib": {"scientist": "Albert Einstein", "date": "1915-03-17", "category": "Physics"}}], "possible_answer": [{"historical_contrib.get_contrib": {"scientist": ["Albert Einstein"], "date": ["1915-03-17", "03/17/1915", "Mar.17,1915"], "category": ["", "all"]}}]}
{"id": "multiple_157", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Optional parameter 'source' not provided and not marked as optional."], "error_type": "simple_function_checker:missing_optional", "prompt": {"id": "multiple_157", "question": [[{"role": "user", "content": "What is the earliest reference of Jesus Christ in history from historical record?"}]], "function": [{"name": "sports_ranking.get_current", "description": "Retrieve the current ranking of a specific team in a particular league.", "parameters": {"type": "dict", "properties": {"team": {"type": "string", "description": "The name of the team whose ranking is sought."}, "league": {"type": "string", "description": "The league in which the team participates."}, "season": {"type": "string", "description": "The season for which the ranking is sought. Defaults to the current season if not provided."}}, "required": ["team", "league"]}}, {"name": "get_earliest_reference", "description": "Retrieve the earliest historical reference of a person.", "parameters": {"type": "dict", "properties": {"name": {"type": "string", "description": "The name of the person."}, "source": {"type": "string", "enum": ["scriptures", "historical records"], "description": "Source to fetch the reference. Default is 'scriptures'"}}, "required": ["name"]}}]}, "model_result_raw": "[get_earliest_reference(name='Jesus Christ')]", "model_result_decoded": [{"get_earliest_reference": {"name": "Jesus Christ"}}], "possible_answer": [{"get_earliest_reference": {"name": ["Jesus Christ"], "source": ["historical records"]}}]}
{"id": "multiple_165", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Invalid value for parameter 'model': 'Les Paul'. Expected one of ['Gibson Les Paul']. Case insensitive."], "error_type": "value_error:string", "prompt": {"id": "multiple_165", "question": [[{"role": "user", "content": "Find the price of a used Gibson Les Paul guitar in excellent condition in the Chicago area."}]], "function": [{"name": "identify_color_rgb", "description": "This function identifies the RGB values of a named color.", "parameters": {"type": "dict", "properties": {"color_name": {"type": "string", "description": "Name of the color."}, "standard": {"type": "string", "description": "The color standard (e.g. basic, pantone). Default is 'basic'"}}, "required": ["color_name"]}}, {"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}, {"name": "guitar_price.find", "description": "Retrieve the price of a specific used guitar model based on its condition and location.", "parameters": {"type": "dict", "properties": {"model": {"type": "string", "description": "The model of the guitar."}, "condition": {"type": "string", "enum": ["Poor", "Good", "Excellent"], "description": "The condition of the guitar."}, "location": {"type": "string", "description": "The location where the guitar is being sold."}}, "required": ["model", "condition", "location"]}}]}, "model_result_raw": "[guitar_price.find(model=\"Les Paul\", condition=\"Excellent\", location=\"Chicago\")]", "model_result_decoded": [{"guitar_price.find": {"model": "Les Paul", "condition": "Excellent", "location": "Chicago"}}], "possible_answer": [{"guitar_price.find": {"model": ["Gibson Les Paul"], "condition": ["Excellent"], "location": ["Chicago", "Chicago area"]}}]}
{"id": "multiple_177", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Function name 'board_game.chess.get_top_players' not found in model output."], "error_type": "simple_function_checker:wrong_func_name", "prompt": {"id": "multiple_177", "question": [[{"role": "user", "content": "Find the top chess players in New York with a rating above 2300."}]], "function": [{"name": "board_game.chess.get_top_players", "description": "Find top chess players in a location based on rating.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city you want to find the players from."}, "minimum_rating": {"type": "integer", "description": "Minimum rating to filter the players."}, "number_of_players": {"type": "integer", "default": 10, "description": "Number of players you want to retrieve, default value is 10"}}, "required": ["location", "minimum_rating"]}}, {"name": "get_historical_GDP", "description": "Retrieve historical GDP data for a specific country and time range.", "parameters": {"type": "dict", "properties": {"country": {"type": "string", "description": "The country for which the historical GDP data is required."}, "start_year": {"type": "integer", "description": "Starting year of the period for which GDP data is required."}, "end_year": {"type": "integer", "description": "Ending year of the period for which GDP data is required."}}, "required": ["country", "start_year", "end_year"]}}, {"name": "maps.get_distance_duration", "description": "Retrieve the travel distance and estimated travel time from one location to another via car", "parameters": {"type": "dict", "properties": {"start_location": {"type": "string", "description": "Starting point of the journey"}, "end_location": {"type": "string", "description": "Ending point of the journey"}, "traffic": {"type": "boolean", "description": "If true, considers current traffic. Default is false."}}, "required": ["start_location", "end_location"]}}]}, "model_result_raw": "board_game_chess.get_top_players(location=\"New York\", minimum_rating=2300)", "model_result_decoded": [{"board_game_chess.get_top_players": {"location": "New York", "minimum_rating": 2300}}], "possible_answer": [{"board_game.chess.get_top_players": {"location": ["New York", "New York, NY", "NYC"], "minimum_rating": [2300], "number_of_players": ["", 10]}}]}
{"id": "multiple_178", "model_name": "Qwen_Qwen2.5-3B-Instruct", "test_category": "multiple", "valid": false, "error": ["Incorrect type for parameter 'deck'. Expected type array, got NoneType. Parameter value: None."], "error_type": "type_error:simple", "prompt": {"id": "multiple_178", "question": [[{"role": "user", "content": "Find a Card of rank 'Queen' and suit 'Hearts' in the deck."}]], "function": [{"name": "currency_exchange.convert", "description": "Convert an amount from a base currency to a target currency based on the current exchange rate.", "parameters": {"type": "dict", "properties": {"base_currency": {"type": "string", "description": "The currency to convert from."}, "target_currency": {"type": "string", "description": "The currency to convert to."}, "amount": {"type": "float", "description": "The amount in base currency to convert"}}, "required": ["base_currency", "target_currency", "amount"]}}, {"name": "local_nursery.find", "description": "Locate local nurseries based on location and plant types availability.", "parameters": {"type": "dict", "properties": {"location": {"type": "string", "description": "The city or locality where the nursery needs to be located."}, "plant_types": {"type": "array", "items": {"type": "string", "enum": ["Annual", "Perennial", "Shrub", "Tree", "Herbs", "Fruits"]}, "description": "Type of plants the nursery should provide."}}, "required": ["location", "plant_types"]}}, {"name": "find_card_in_deck", "description": "Locate a particular card in a deck based on rank and suit.", "parameters": {"type": "dict", "properties": {"rank": {"type": "string", "description": "Rank of the card (e.g. Ace, Two, King)."}, "suit": {"type": "string", "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."}, "deck": {"type": "array", "items": {"type": "dict", "properties": {"rank": {"type": "string"}, "suit": {"type": "string"}}}, "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck by default"}}, "required": ["rank", "suit"]}}, {"name": "recipe.unit_conversion", "description": "Convert a value from one kitchen unit to another for cooking purposes.", "parameters": {"type": "dict", "properties": {"value": {"type": "float", "description": "The value to be converted."}, "from_unit": {"type": "string", "description": "The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "to_unit": {"type": "string", "description": "The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, "precision": {"type": "integer", "description": "The precision to round the output to, in case of a non-integer result. Optional, default is 0."}}, "required": ["value", "from_unit", "to_unit"]}}]}, "model_result_raw": "[find_card_in_deck(rank='Queen', suit='Hearts', deck=None)]", "model_result_decoded": [{"find_card_in_deck": {"rank": "Queen", "suit": "Hearts", "deck": null}}], "possible_answer": [{"find_card_in_deck": {"rank": ["Queen"], "suit": ["Hearts"], "deck": [""]}}]}